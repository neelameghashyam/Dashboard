{
    "pipes": [],
    "interfaces": [
        {
            "name": "ApiUser",
            "id": "interface-ApiUser-9978a80448c6333b486819b4506ab368caa086df2c318e7f1ca01de1baabb364e38fe54a739e8c3a802aaa6f0e207801ab802a74f77bed5740904c2231099c97",
            "file": "src/app/pages/Employee/store/employee-store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  patchState,\n  signalStore,\n  withComputed,\n  withHooks,\n  withMethods,\n  withState,\n} from '@ngrx/signals';\nimport { computed, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Employee } from '../Employee';\nimport { lastValueFrom } from 'rxjs';\n\n// Define the API response interface to match JSONPlaceholder structure\ninterface ApiUser {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: {\n    street: string;\n    suite: string;\n    city: string;\n    zipcode: string;\n    geo: {\n      lat: string;\n      lng: string;\n    };\n  };\n  phone: string;\n  website: string;\n  company: {\n    name: string;\n    catchPhrase: string;\n    bs: string;\n  };\n}\n\ntype EmployeeState = {\n  initialized: boolean;\n  error: string | null;\n  employees: Employee[];\n};\n\nconst initialState: EmployeeState = {\n  initialized: false,\n  error: null,\n  employees: [],\n};\n\nconst apiUrl = 'https://jsonplaceholder.typicode.com/users';\n\nexport const EmployeeStore = signalStore(\n  { providedIn: 'root' },\n  withState(initialState),\n  withComputed(({ employees }) => ({\n    employees: computed(() => employees()),\n    isLoading: computed(() => !initialState.initialized),\n  })),\n  withMethods((store, http = inject(HttpClient)) => ({\n    async loadEmployees() {\n      try {\n        // Check localStorage first\n        const localData = localStorage.getItem('employees');\n        if (localData) {\n          const employees: Employee[] = JSON.parse(localData);\n          patchState(store, { employees, initialized: true, error: null });\n          return;\n        }\n\n        // Fetch from API if not in localStorage\n        const response = await lastValueFrom(http.get<ApiUser[]>(apiUrl));\n        const mappedEmployees: Employee[] = response.map(user => ({\n          id: user.id,\n          name: user.name,\n          company: user.company.name,\n          bs: user.company.bs,\n          website: user.website,\n        }));\n        localStorage.setItem('employees', JSON.stringify(mappedEmployees));\n        patchState(store, { employees: mappedEmployees, initialized: true, error: null });\n      } catch (error) {\n        patchState(store, { error: 'Failed to load employees' });\n        throw error;\n      }\n    },\n    addEmployee(employee: Employee) {\n      try {\n        const newEmployees = [...store.employees(), { ...employee, id: Date.now() }]; // Use timestamp for unique ID\n        localStorage.setItem('employees', JSON.stringify(newEmployees));\n        patchState(store, { employees: newEmployees, error: null });\n      } catch (error) {\n        patchState(store, { error: 'Failed to add employee' });\n        throw error;\n      }\n    },\n    updateEmployee(employee: Employee) {\n      try {\n        const updatedEmployees = store.employees().map(emp =>\n          emp.id === employee.id ? employee : emp\n        );\n        localStorage.setItem('employees', JSON.stringify(updatedEmployees));\n        patchState(store, { employees: updatedEmployees, error: null });\n      } catch (error) {\n        patchState(store, { error: 'Failed to update employee' });\n        throw error;\n      }\n    },\n    deleteEmployee(empId: number) {\n      try {\n        const updatedEmployees = store.employees().filter(emp => emp.id !== empId);\n        localStorage.setItem('employees', JSON.stringify(updatedEmployees));\n        patchState(store, { employees: updatedEmployees, error: null });\n      } catch (error) {\n        patchState(store, { error: 'Failed to delete employee' });\n        throw error;\n      }\n    },\n    getEmployee(empId: number): Employee | undefined {\n      try {\n        return store.employees().find(emp => emp.id === empId);\n      } catch (error) {\n        patchState(store, { error: `Failed to fetch employee with ID ${empId}` });\n        throw error;\n      }\n    },\n  })),\n  withHooks({\n    onInit(store) {\n      store.loadEmployees();\n    },\n  })\n);",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "company",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "website",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Employee",
            "id": "interface-Employee-f818a9756d429a0135406092bf8b150242badf12318dc45da54a49143a6a999986c3b339f702b64f2b5bf3806391d5e598db481f5ab699740b3aef80ea6f1c90",
            "file": "src/app/pages/Employee/Employee.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Employee {\n    id: number;\n    name: string;\n    company: string;\n    bs: string;\n    website: string;\n  }",
            "properties": [
                {
                    "name": "bs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "company",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "website",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MenuItem",
            "id": "interface-MenuItem-bcfaefaed1621a27018348a8526a55ac7d0242dfaa9ac604f72a658f76b66161286a200a015c581d9a3a5a4a537d5bbbc8c3e1fd3d98d18bd923f08412286bdf",
            "file": "src/app/components/custom-sidenav/custom-sidenav.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, computed, Input, signal, inject } from '@angular/core';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { DarkModeService } from 'src/app/services/dark-theme/dark-mode.service';\nimport { ResponsiveService } from 'src/app/services/responsive/responsive.service';\nimport { ThemeService } from 'src/app/services/theme/theme.service'; \n\ninterface MenuItem {\n  icon: string;\n  label: string;\n  route: string;\n}\n\n@Component({\n  selector: 'app-custom-sidenav',\n  standalone: true,\n  imports: [CommonModule, MatListModule, MatIconModule, RouterModule],\n  templateUrl: './custom-sidenav.component.html',\n  styleUrl: './custom-sidenav.component.scss'\n})\nexport class CustomSidenavComponent {\n  public responsiveService = inject(ResponsiveService);\n  public darkModeService = inject(DarkModeService);\n  public themeService = inject(ThemeService);\n  \n  menuItems = signal<MenuItem[]>([\n    { icon: 'dashboard', label: 'Dashboard', route: 'dashboard' },\n    { icon: 'assignment', label: 'Form', route: 'form' },\n    { icon: 'analytics', label: 'Analytics', route: 'analytics' },\n    { icon: 'comment', label: 'Comments', route: 'comments' },\n    { icon: 'store', label: 'Store', route: 'store' },\n    { icon: 'group', label: 'Employee', route: 'employee' }\n  ]);\n\n  sideNavCollapsed = signal(false);\n  @Input() set collapsed(val: boolean) {\n    this.sideNavCollapsed.set(val);\n  }\n\n  // Access the current theme\n  currentTheme = computed(() => this.themeService.currentTheme());\n}",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Theme",
            "id": "interface-Theme-14001c0e342b8c90c6b1a6a5d6078c7e0f813a7937be5ba35321712b0a310b6c25b21e32d2ac25419d42ec891cd3d6f769b0f0637acc71441ce8a815371eb0ad",
            "file": "src/app/services/theme/theme.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, signal, effect } from '@angular/core';\nimport { DarkModeService } from '../dark-theme/dark-mode.service';\n\nexport interface Theme {\n  id: string;\n  primary: string;\n  displayName: string;\n  darkModeClass: string;\n  lightModeClass: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemeService {\n  private readonly themes: Theme[] = [\n    {\n      id: 'deep-blue',\n      primary: '#1976D2',\n      displayName: 'Deep-Blue',\n      darkModeClass: 'deep-blue-dark-theme',\n      lightModeClass: 'deep-blue-light-theme'\n    },\n    { \n      id: 'green', \n      primary: '#00796B', \n      displayName: 'Green',\n      darkModeClass: 'green-dark-theme',\n      lightModeClass: 'green-light-theme'\n    },\n    { \n      id: 'orange', \n      primary: '#E65100', \n      displayName: 'Orange',\n      darkModeClass: 'orange-dark-theme',\n      lightModeClass: 'orange-light-theme'\n    },\n    { \n      id: 'purple', \n      primary: '#6200EE', \n      displayName: 'Purple',\n      darkModeClass: 'purple-dark-theme',\n      lightModeClass: 'purple-light-theme'\n    },\n    { \n      id: 'red', \n      primary: '#C2185B', \n      displayName: 'Red',\n      darkModeClass: 'red-dark-theme',\n      lightModeClass: 'red-light-theme'\n    },\n  ];\n\n  currentTheme = signal<Theme>(this.themes[0]);\n\n  constructor(private darkModeService: DarkModeService) {\n    // Set up an effect to apply theme whenever dark mode changes\n    effect(() => {\n      this.applyCurrentTheme();\n    });\n  }\n\n  getThemes(): Theme[] {\n    return this.themes;\n  }\n\n  setTheme(themeId: string): void {\n    const theme = this.themes.find((t) => t.id === themeId);\n    if (theme) {\n      this.currentTheme.set(theme);\n      this.applyCurrentTheme();\n    }\n  }\n\n  private applyCurrentTheme(): void {\n    // Remove all theme classes first\n    document.body.classList.remove(\n      ...this.themes.flatMap(t => [t.darkModeClass, t.lightModeClass])\n    );\n    \n    // Add the appropriate theme class based on dark mode\n    const currentTheme = this.currentTheme();\n    const isDarkMode = this.darkModeService.darkMode();\n    const themeClass = isDarkMode ? currentTheme.darkModeClass : currentTheme.lightModeClass;\n    \n    document.body.classList.add(themeClass);\n    \n    // Set CSS variables for icons and other theme properties\n    document.body.style.setProperty('--mat-icon-color', 'var(--mat-sys-on-surface)');\n    document.body.style.setProperty('--mat-sys-primary', currentTheme.primary);\n  }\n}",
            "properties": [
                {
                    "name": "darkModeClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "lightModeClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "primary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "DarkModeService",
            "id": "injectable-DarkModeService-4d1a8a9cc17f895e20a82c954c2bcf63a05cb412086a1f2e7d99877cce3a749f3c375032c54de8b52e0c43694409ceea341929548915d000e5a2530da96efc3b",
            "file": "src/app/services/dark-theme/dark-mode.service.ts",
            "properties": [
                {
                    "name": "darkMode",
                    "defaultValue": "signal<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal } from \"@angular/core\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DarkModeService {\n  darkMode = signal<boolean>(false);\n\n  constructor() {\n    // Initialize from localStorage or system preference\n    const savedMode = localStorage.getItem('darkMode');\n    if (savedMode !== null) {\n      this.darkMode.set(savedMode === 'true');\n    } else {\n      this.darkMode.set(window.matchMedia('(prefers-color-scheme: dark)').matches);\n    }\n\n    // Watch for system preference changes\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n      if (!localStorage.getItem('darkMode')) {\n        this.darkMode.set(e.matches);\n      }\n    });\n  }\n\n  toggle() {\n    this.darkMode.update(mode => {\n      const newMode = !mode;\n      localStorage.setItem('darkMode', String(newMode));\n      return newMode;\n    });\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DarkModeServiceMock",
            "id": "injectable-DarkModeServiceMock-71bdf0eb0e0bfaa40118b42f42b86b5c44d04041ba22ddc5d064658097441a738c6da5e837bbdae7ac34316b823804627d403531c7390cd72f9572c6a34073dd",
            "file": "src/stories/mocks/dark-mode.service.mock.ts",
            "properties": [
                {
                    "name": "darkMode",
                    "defaultValue": "signal<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class DarkModeServiceMock {\r\n  darkMode = signal<boolean>(false);\r\n\r\n  toggle() {\r\n    this.darkMode.update(mode => !mode);\r\n  }\r\n}",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ResponsiveService",
            "id": "injectable-ResponsiveService-cd8940b795ace577879cbf9b701ac7499c57feaa2a4dc88857ae9eef37481a29e5cc89d5b978b04aecb321c2e27a3cf132cb3b644101d021a8de492518586754",
            "file": "src/app/services/responsive/responsive.service.ts",
            "properties": [
                {
                    "name": "breakpointState",
                    "defaultValue": "{\n    isXSmall: false,\n    isSmall: false,\n    isMedium: false,\n    isLarge: false,\n    isXLarge: false\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "currentBreakpoint",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isDesktop",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isMobile",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isTablet",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ResponsiveService {\n  private breakpointState = {\n    isXSmall: false,\n    isSmall: false,\n    isMedium: false,\n    isLarge: false,\n    isXLarge: false\n  };\n\n  constructor(private breakpointObserver: BreakpointObserver) {\n    this.breakpointObserver.observe([\n      Breakpoints.XSmall,\n      Breakpoints.Small,\n      Breakpoints.Medium,\n      Breakpoints.Large,\n      Breakpoints.XLarge\n    ]).subscribe(result => {\n      this.breakpointState = {\n        isXSmall: result.breakpoints[Breakpoints.XSmall],\n        isSmall: result.breakpoints[Breakpoints.Small],\n        isMedium: result.breakpoints[Breakpoints.Medium],\n        isLarge: result.breakpoints[Breakpoints.Large],\n        isXLarge: result.breakpoints[Breakpoints.XLarge]\n      };\n    });\n  }\n\n  isMobile(): boolean {\n    return this.breakpointState.isXSmall;\n  }\n\n  isTablet(): boolean {\n    return this.breakpointState.isSmall || this.breakpointState.isMedium;\n  }\n\n  isDesktop(): boolean {\n    return this.breakpointState.isLarge || this.breakpointState.isXLarge;\n  }\n\n  currentBreakpoint(): string {\n    if (this.breakpointState.isXSmall) return 'xsmall';\n    if (this.breakpointState.isSmall) return 'small';\n    if (this.breakpointState.isMedium) return 'medium';\n    if (this.breakpointState.isLarge) return 'large';\n    return 'xlarge';\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ResponsiveServiceMock",
            "id": "injectable-ResponsiveServiceMock-e2ae0d94904e69a565aa4ead7fe17b074a5c8a9902b28df59465575eb94aab7e9877009fb2013582eb1dd8420100477e8fa666de0332265bec591dda66b41ba1",
            "file": "src/stories/mocks/responsive.service.mock.ts",
            "properties": [],
            "methods": [
                {
                    "name": "currentBreakpoint",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isDesktop",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isMobile",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isTablet",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class ResponsiveServiceMock {\r\n  isMobile(): boolean {\r\n    return false;\r\n  }\r\n\r\n  isTablet(): boolean {\r\n    return false;\r\n  }\r\n\r\n  isDesktop(): boolean {\r\n    return true;\r\n  }\r\n\r\n  currentBreakpoint(): string {\r\n    return 'large';\r\n  }\r\n}",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-14001c0e342b8c90c6b1a6a5d6078c7e0f813a7937be5ba35321712b0a310b6c25b21e32d2ac25419d42ec891cd3d6f769b0f0637acc71441ce8a815371eb0ad",
            "file": "src/app/services/theme/theme.service.ts",
            "properties": [
                {
                    "name": "currentTheme",
                    "defaultValue": "signal<Theme>(this.themes[0])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "themes",
                    "defaultValue": "[\n    {\n      id: 'deep-blue',\n      primary: '#1976D2',\n      displayName: 'Deep-Blue',\n      darkModeClass: 'deep-blue-dark-theme',\n      lightModeClass: 'deep-blue-light-theme'\n    },\n    { \n      id: 'green', \n      primary: '#00796B', \n      displayName: 'Green',\n      darkModeClass: 'green-dark-theme',\n      lightModeClass: 'green-light-theme'\n    },\n    { \n      id: 'orange', \n      primary: '#E65100', \n      displayName: 'Orange',\n      darkModeClass: 'orange-dark-theme',\n      lightModeClass: 'orange-light-theme'\n    },\n    { \n      id: 'purple', \n      primary: '#6200EE', \n      displayName: 'Purple',\n      darkModeClass: 'purple-dark-theme',\n      lightModeClass: 'purple-light-theme'\n    },\n    { \n      id: 'red', \n      primary: '#C2185B', \n      displayName: 'Red',\n      darkModeClass: 'red-dark-theme',\n      lightModeClass: 'red-light-theme'\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Theme[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "applyCurrentTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getThemes",
                    "args": [],
                    "optional": false,
                    "returnType": "Theme[]",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "themeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "themeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal, effect } from '@angular/core';\nimport { DarkModeService } from '../dark-theme/dark-mode.service';\n\nexport interface Theme {\n  id: string;\n  primary: string;\n  displayName: string;\n  darkModeClass: string;\n  lightModeClass: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemeService {\n  private readonly themes: Theme[] = [\n    {\n      id: 'deep-blue',\n      primary: '#1976D2',\n      displayName: 'Deep-Blue',\n      darkModeClass: 'deep-blue-dark-theme',\n      lightModeClass: 'deep-blue-light-theme'\n    },\n    { \n      id: 'green', \n      primary: '#00796B', \n      displayName: 'Green',\n      darkModeClass: 'green-dark-theme',\n      lightModeClass: 'green-light-theme'\n    },\n    { \n      id: 'orange', \n      primary: '#E65100', \n      displayName: 'Orange',\n      darkModeClass: 'orange-dark-theme',\n      lightModeClass: 'orange-light-theme'\n    },\n    { \n      id: 'purple', \n      primary: '#6200EE', \n      displayName: 'Purple',\n      darkModeClass: 'purple-dark-theme',\n      lightModeClass: 'purple-light-theme'\n    },\n    { \n      id: 'red', \n      primary: '#C2185B', \n      displayName: 'Red',\n      darkModeClass: 'red-dark-theme',\n      lightModeClass: 'red-light-theme'\n    },\n  ];\n\n  currentTheme = signal<Theme>(this.themes[0]);\n\n  constructor(private darkModeService: DarkModeService) {\n    // Set up an effect to apply theme whenever dark mode changes\n    effect(() => {\n      this.applyCurrentTheme();\n    });\n  }\n\n  getThemes(): Theme[] {\n    return this.themes;\n  }\n\n  setTheme(themeId: string): void {\n    const theme = this.themes.find((t) => t.id === themeId);\n    if (theme) {\n      this.currentTheme.set(theme);\n      this.applyCurrentTheme();\n    }\n  }\n\n  private applyCurrentTheme(): void {\n    // Remove all theme classes first\n    document.body.classList.remove(\n      ...this.themes.flatMap(t => [t.darkModeClass, t.lightModeClass])\n    );\n    \n    // Add the appropriate theme class based on dark mode\n    const currentTheme = this.currentTheme();\n    const isDarkMode = this.darkModeService.darkMode();\n    const themeClass = isDarkMode ? currentTheme.darkModeClass : currentTheme.lightModeClass;\n    \n    document.body.classList.add(themeClass);\n    \n    // Set CSS variables for icons and other theme properties\n    document.body.style.setProperty('--mat-icon-color', 'var(--mat-sys-on-surface)');\n    document.body.style.setProperty('--mat-sys-primary', currentTheme.primary);\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "darkModeService",
                        "type": "DarkModeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "darkModeService",
                        "type": "DarkModeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ThemeServiceMock",
            "id": "injectable-ThemeServiceMock-ef12df00b9edc7ba2f469ec4488ffa9a9162415f29cdc46ef0973ad10c33a384b87b974afdcc130c8759a41deea2a5b4b888f845bcce5a9612ee678b62519b89",
            "file": "src/stories/mocks/theme.service.mock.ts",
            "properties": [
                {
                    "name": "currentTheme",
                    "defaultValue": "signal<Theme>(this.themes[0])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "themes",
                    "defaultValue": "[\r\n    {\r\n      id: 'deep-blue',\r\n      primary: '#1976D2',\r\n      displayName: 'Deep-Blue',\r\n      darkModeClass: 'deep-blue-dark-theme',\r\n      lightModeClass: 'deep-blue-light-theme',\r\n    },\r\n    {\r\n      id: 'green',\r\n      primary: '#00796B',\r\n      displayName: 'Green',\r\n      darkModeClass: 'green-dark-theme',\r\n      lightModeClass: 'green-light-theme',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Theme[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getThemes",
                    "args": [],
                    "optional": false,
                    "returnType": "Theme[]",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "themeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "themeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\r\nimport { Theme } from '../../app/services/theme/theme.service';\r\n\r\n@Injectable()\r\nexport class ThemeServiceMock {\r\n  private themes: Theme[] = [\r\n    {\r\n      id: 'deep-blue',\r\n      primary: '#1976D2',\r\n      displayName: 'Deep-Blue',\r\n      darkModeClass: 'deep-blue-dark-theme',\r\n      lightModeClass: 'deep-blue-light-theme',\r\n    },\r\n    {\r\n      id: 'green',\r\n      primary: '#00796B',\r\n      displayName: 'Green',\r\n      darkModeClass: 'green-dark-theme',\r\n      lightModeClass: 'green-light-theme',\r\n    },\r\n  ];\r\n\r\n  currentTheme = signal<Theme>(this.themes[0]);\r\n\r\n  getThemes(): Theme[] {\r\n    return this.themes;\r\n  }\r\n\r\n  setTheme(themeId: string): void {\r\n    const theme = this.themes.find(t => t.id === themeId);\r\n    if (theme) {\r\n      this.currentTheme.set(theme);\r\n    }\r\n  }\r\n}",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TranslocoHttpLoader",
            "id": "injectable-TranslocoHttpLoader-290b6eddb0df8ff819c4dbe4c10c776989d2f7b03f46de13148f37167ba7e31bc4b4cfdc99f41da00c1dc76a2d82b8f31cbdc26e13d274993a297644122fa028",
            "file": "src/app/transloco-root.module.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Translation>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport {\n  TRANSLOCO_LOADER,\n  Translation,\n  TranslocoLoader,\n  TRANSLOCO_CONFIG,\n  translocoConfig,\n  TranslocoModule,\n} from '@jsverse/transloco';\nimport { Injectable, NgModule } from '@angular/core';\nimport { environment } from '../environments/environment';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class TranslocoHttpLoader implements TranslocoLoader {\n  constructor(private http: HttpClient) {}\n\n  getTranslation(lang: string): Observable<Translation> {\n    return this.http.get<Translation>(`/assets/i18n/${lang}.json`);\n  }\n}\n\n@NgModule({\n  exports: [TranslocoModule],\n  providers: [\n    {\n      provide: TRANSLOCO_CONFIG,\n      useValue: translocoConfig({\n        availableLangs: ['de', 'en'],\n        defaultLang: 'de',\n        // Remove this option if your application doesn't support changing language in runtime.\n        reRenderOnLangChange: true,\n        prodMode: environment.production,\n      }),\n    },\n    { provide: TRANSLOCO_LOADER, useClass: TranslocoHttpLoader },\n  ],\n})\nexport class TranslocoRootModule {}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AddEmployeeComponent",
            "id": "component-AddEmployeeComponent-c710ddf5fce44793f61b094dde785b68a3e687a468051995add2faa4b4f55e78fe97616c2b92727ff3dd33f5c990871c4fcfa91fdedc657a4b833eff84274c0e",
            "file": "src/app/pages/Employee/add-employee/add-employee.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-employee",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./add-employee.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "darkModeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DarkModeService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "empForm",
                    "defaultValue": "new FormGroup({\n    id: new FormControl({ value: 0, disabled: true }),\n    name: new FormControl('', Validators.required),\n    company: new FormControl('', Validators.required),\n    bs: new FormControl('', Validators.required),\n    website: new FormControl('', Validators.required),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "isEdit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "store",
                    "defaultValue": "inject(EmployeeStore)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "title",
                    "defaultValue": "'Add Employee'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "closepopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "SaveEmployee",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { Employee } from '../Employee';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { ToastrService } from 'ngx-toastr';\nimport { EmployeeStore } from '../store/employee-store';\nimport { inject } from '@angular/core';\nimport { DarkModeService } from '../../../services/dark-theme/dark-mode.service'\n\n@Component({\n  selector: 'app-add-employee',\n  standalone: true,\n  imports: [\n    MatCardModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule,\n  ],\n  templateUrl: './add-employee.component.html',\n  styleUrl: './add-employee.component.scss',\n})\nexport class AddEmployeeComponent implements OnInit {\n  title = 'Add Employee';\n  store = inject(EmployeeStore);\n  isEdit = false;\n\n  empForm = new FormGroup({\n    id: new FormControl({ value: 0, disabled: true }),\n    name: new FormControl('', Validators.required),\n    company: new FormControl('', Validators.required),\n    bs: new FormControl('', Validators.required),\n    website: new FormControl('', Validators.required),\n  });\n\n  constructor(\n    private ref: MatDialogRef<AddEmployeeComponent>,\n    private toastr: ToastrService,\n    @Inject(MAT_DIALOG_DATA) public data: { empId: number },\n    public darkModeService: DarkModeService\n  ) {}\n\n  ngOnInit(): void {\n    if (this.data?.empId) {\n      this.isEdit = true;\n      this.title = 'Edit Employee';\n      const employee = this.store.getEmployee(this.data.empId);\n      if (employee) {\n        this.empForm.patchValue({\n          id: employee.id,\n          name: employee.name,\n          company: employee.company,\n          bs: employee.bs,\n          website: employee.website,\n        });\n      } else {\n        this.toastr.error('Failed to load employee data');\n        this.closepopup();\n      }\n    }\n  }\n\n  SaveEmployee() {\n    if (this.empForm.invalid) {\n      this.toastr.error('Please fill all required fields');\n      return;\n    }\n\n    const employeeData: Employee = {\n      id: this.isEdit ? this.empForm.getRawValue().id! : Date.now(),\n      name: this.empForm.getRawValue().name!,\n      company: this.empForm.getRawValue().company!,\n      bs: this.empForm.getRawValue().bs!,\n      website: this.empForm.getRawValue().website!,\n    };\n\n    try {\n      if (this.isEdit) {\n        this.store.updateEmployee(employeeData);\n        this.toastr.success('Employee updated successfully');\n      } else {\n        this.store.addEmployee(employeeData);\n        this.toastr.success('Employee added successfully');\n      }\n      this.closepopup();\n    } catch (error) {\n      this.toastr.error(this.isEdit ? 'Failed to update employee' : 'Failed to add employee');\n    }\n  }\n\n  closepopup() {\n    this.ref.close();\n  }\n}",
            "styleUrl": "./add-employee.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "MatDialogRef<AddEmployeeComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "darkModeService",
                        "type": "DarkModeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "MatDialogRef<AddEmployeeComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "darkModeService",
                        "type": "DarkModeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"empForm\" (ngSubmit)=\"SaveEmployee()\" [class.dark-mode]=\"darkModeService.darkMode()\">\n    <mat-card>\n        <mat-card-header>\n          <h2>{{title}}</h2>\n        </mat-card-header>\n        <mat-card-content>\n            <div class=\"form-grid\">\n                <mat-form-field floatLabel=\"auto\">\n                    <mat-label>Employee Id</mat-label>\n                    <input matInput formControlName=\"id\" type=\"number\" readonly>\n                </mat-form-field>\n                <mat-form-field floatLabel=\"auto\">\n                    <mat-label>Employee Name</mat-label>\n                    <input matInput formControlName=\"name\" required placeholder=\"Enter employee name\">\n                </mat-form-field>\n                <mat-form-field floatLabel=\"auto\">\n                    <mat-label>Company</mat-label>\n                    <input matInput formControlName=\"company\" required placeholder=\"Enter company name\">\n                </mat-form-field>\n                <mat-form-field floatLabel=\"auto\">\n                    <mat-label>Business Strategy</mat-label>\n                    <input matInput formControlName=\"bs\" required placeholder=\"Enter business strategy\">\n                </mat-form-field>\n                <mat-form-field floatLabel=\"auto\">\n                    <mat-label>Website</mat-label>\n                    <input matInput formControlName=\"website\" required placeholder=\"Enter website URL\">\n                </mat-form-field>\n            </div>\n        </mat-card-content>\n        <mat-card-actions>\n          <button type=\"submit\" mat-raised-button color=\"primary\">Save</button>\n          <a mat-raised-button color=\"accent\" (click)=\"closepopup()\">Close</a>\n        </mat-card-actions>\n    </mat-card>\n</form>"
        },
        {
            "name": "AnalyticsComponent",
            "id": "component-AnalyticsComponent-e12485a6a94785a2f46eab77560fb1bc38d98374ee89f1afa74b702a28f5e0b7716ea91fff3d7db93e74b44f50c842a9c58e81c997b31d2eb82fcc36f568ee8d",
            "file": "src/app/pages/analytics/analytics.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-analytics",
            "styleUrls": [
                "./analytics.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./analytics.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ageGroups",
                    "defaultValue": "['Under 18', '18-30', '30-40', '40-50', 'Over 50']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "countries",
                    "defaultValue": "[\n    { value: 'us', viewValue: 'United States' },\n    { value: 'uk', viewValue: 'United Kingdom' },\n    { value: 'ca', viewValue: 'Canada' },\n    { value: 'au', viewValue: 'Australia' },\n    { value: 'in', viewValue: 'India' }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "darkModeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DarkModeService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "firstFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "genders",
                    "defaultValue": "[\n    { value: 'male', viewValue: 'Male' },\n    { value: 'female', viewValue: 'Female' },\n    { value: 'other', viewValue: 'Other' },\n    { value: 'prefer-not-to-say', viewValue: 'Prefer not to say' }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "isLinear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "isMobile",
                    "defaultValue": "window.innerWidth < 768",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "secondFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "showSuccessMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "states",
                    "defaultValue": "[\n    { value: 'ap', viewValue: 'Andhra Pradesh' },\n    { value: 'tn', viewValue: 'Tamil Nadu' },\n    { value: 'ka', viewValue: 'Karnataka' },\n    { value: 'ts', viewValue: 'Telangana' },\n    { value: 'kl', viewValue: 'Kerala' }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "submittedData",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "thirdFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                }
            ],
            "methodsClass": [
                {
                    "name": "finalSubmit",
                    "args": [
                        {
                            "name": "stepper",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "stepper",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCountryViewValue",
                    "args": [
                        {
                            "name": "countryValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "countryValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGenderViewValue",
                    "args": [
                        {
                            "name": "genderValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "genderValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStateViewValue",
                    "args": [
                        {
                            "name": "stateValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "stateValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeForms",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "stepper",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "stepper",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetForm",
                    "args": [
                        {
                            "name": "stepper",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "stepper",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatStepperModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatNativeDateModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "DatePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CommonModule, DatePipe } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { DarkModeService } from 'src/app/services/dark-theme/dark-mode.service';\n\n@Component({\n  selector: 'app-analytics',\n  templateUrl: './analytics.component.html',\n  styleUrls: ['./analytics.component.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatStepperModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatIconModule,\n    MatListModule,\n    DatePipe\n  ],\n  animations: [\n    trigger('fadeIn', [\n      transition(':enter', [\n        style({ opacity: 0 }),\n        animate('300ms ease-out', style({ opacity: 1 }))\n      ])\n    ]),\n    trigger('slideIn', [\n      transition(':enter', [\n        style({ transform: 'translateX(20px)', opacity: 0 }),\n        animate('300ms ease-out', style({ transform: 'translateX(0)', opacity: 1 }))\n      ])\n    ])\n  ]\n})\nexport class AnalyticsComponent {\n  firstFormGroup: FormGroup;\n  secondFormGroup: FormGroup;\n  thirdFormGroup: FormGroup;\n  isLinear = true;\n  isMobile = window.innerWidth < 768;\n  submittedData: any = null;\n  showSuccessMessage = false;\n\n  genders = [\n    { value: 'male', viewValue: 'Male' },\n    { value: 'female', viewValue: 'Female' },\n    { value: 'other', viewValue: 'Other' },\n    { value: 'prefer-not-to-say', viewValue: 'Prefer not to say' }\n  ];\n\n  ageGroups = ['Under 18', '18-30', '30-40', '40-50', 'Over 50'];\n\n  countries = [\n    { value: 'us', viewValue: 'United States' },\n    { value: 'uk', viewValue: 'United Kingdom' },\n    { value: 'ca', viewValue: 'Canada' },\n    { value: 'au', viewValue: 'Australia' },\n    { value: 'in', viewValue: 'India' }\n  ];\n\n  states = [\n    { value: 'ap', viewValue: 'Andhra Pradesh' },\n    { value: 'tn', viewValue: 'Tamil Nadu' },\n    { value: 'ka', viewValue: 'Karnataka' },\n    { value: 'ts', viewValue: 'Telangana' },\n    { value: 'kl', viewValue: 'Kerala' }\n  ];\n\n  constructor(private _formBuilder: FormBuilder,\n    public darkModeService: DarkModeService\n  ) {\n    this.initializeForms();\n    \n    window.addEventListener('resize', () => {\n      this.isMobile = window.innerWidth < 768;\n    });\n  }\n\n  initializeForms() {\n    this.firstFormGroup = this._formBuilder.group({\n      firstName: ['', [Validators.required, Validators.minLength(2)]],\n      lastName: ['', [Validators.required, Validators.minLength(2)]],\n      email: ['', [Validators.required, Validators.email]],\n      phone: ['', [Validators.pattern(/^[0-9]{10,15}$/)]]\n    });\n\n    this.secondFormGroup = this._formBuilder.group({\n      gender: ['', Validators.required],\n      dob: ['', Validators.required],\n      ageGroup: [[], [Validators.required, Validators.minLength(1)]]\n    });\n\n    this.thirdFormGroup = this._formBuilder.group({\n      address: ['', [Validators.required, Validators.minLength(10)]],\n      country: ['', Validators.required],\n      state: ['', Validators.required],\n      zipCode: ['', [Validators.required, Validators.pattern(/^[0-9]{5,10}$/)]]\n    });\n  }\n\n  get firstName() { return this.firstFormGroup.get('firstName'); }\n  get lastName() { return this.firstFormGroup.get('lastName'); }\n  get email() { return this.firstFormGroup.get('email'); }\n  get phone() { return this.firstFormGroup.get('phone'); }\n  get gender() { return this.secondFormGroup.get('gender'); }\n  get dob() { return this.secondFormGroup.get('dob'); }\n  get ageGroup() { return this.secondFormGroup.get('ageGroup'); }\n  get address() { return this.thirdFormGroup.get('address'); }\n  get country() { return this.thirdFormGroup.get('country'); }\n  get state() { return this.thirdFormGroup.get('state'); }\n  get zipCode() { return this.thirdFormGroup.get('zipCode'); }\n\n  getGenderViewValue(genderValue: string): string {\n    const gender = this.genders.find(g => g.value === genderValue);\n    return gender ? gender.viewValue : genderValue;\n  }\n\n  getCountryViewValue(countryValue: string): string {\n    const country = this.countries.find(c => c.value === countryValue);\n    return country ? country.viewValue : countryValue;\n  }\n\n  getStateViewValue(stateValue: string): string {\n    const state = this.states.find(s => s.value === stateValue);\n    return state ? state.viewValue : stateValue;\n  }\n\n  onSubmit(stepper: any) {\n    if (this.firstFormGroup.valid && this.secondFormGroup.valid && this.thirdFormGroup.valid) {\n      this.submittedData = {\n        ...this.firstFormGroup.value,\n        ...this.secondFormGroup.value,\n        ...this.thirdFormGroup.value\n      };\n      stepper.next();\n    }\n  }\n\n  finalSubmit(stepper: any) {\n    console.log('Form submitted:', this.submittedData);\n    this.showSuccessMessage = true;\n    \n    setTimeout(() => {\n      this.resetForm(stepper);\n      this.showSuccessMessage = false;\n    }, 3000);\n  }\n\n  resetForm(stepper: any) {\n    this.submittedData = null;\n    this.initializeForms();\n    stepper.reset();\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '@angular/material' as mat;\n\n.form-container {\n  max-width: 800px;\n  margin: 1rem auto;\n  padding: 20px;\n  background-color: white;\n  border-radius: 16px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n  transition: all 0.3s ease;\n  font-family: 'Roboto', sans-serif;\n  color: rgba(0, 0, 0, 0.87);\n\n  // Apply density to form fields\n  .mat-mdc-form-field {\n    @include mat.form-field-density(-6);\n\n   // Inside your .form-container\n.mat-mdc-form-field {\n    // Make labels always visible (float above)\n    .mdc-text-field--filled .mdc-floating-label {\n      transform: translateY(-50%) scale(0.75) !important;\n      pointer-events: none;\n      font-size: 14px;\n      color: rgba(0, 0, 0, 0.6);\n      // Keep label always above\n      &.mdc-floating-label--float-above {\n        transform: translateY(-50%) scale(0.75) !important;\n      }\n    }\n  \n    // Adjust the label position\n    .mdc-text-field--filled .mdc-floating-label--float-above {\n      top: 28px;\n    }\n  \n    // Show placeholder text always\n    .mat-mdc-input-element::placeholder {\n      opacity: 1 !important;\n      visibility: visible !important;\n    }\n  \n    // Dark mode adjustments\n    &.dark-mode {\n      .mdc-text-field--filled .mdc-floating-label {\n        color: rgba(255, 255, 255, 0.6) !important;\n      }\n  \n      .mat-mdc-input-element::placeholder {\n        color: rgba(255, 255, 255, 0.6) !important;\n      }\n    }\n  }}\n\n  &.dark-mode {\n    background-color: #121212;\n    color: white;\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\n\n    // Form fields in dark mode\n    .mat-mdc-form-field {\n      .mdc-text-field--filled:not(.mdc-text-field--disabled) {\n        background-color: #1e1e1e;\n        \n        &:hover, \n        &.mdc-text-field--focused {\n          background-color: #252525;\n        }\n      }\n      \n      // Dark mode labels\n      .mdc-floating-label {\n        color: rgba(60, 60, 60, 0.6);\n      }\n\n      .mdc-text-field--filled:not(.mdc-text-field--disabled):hover .mdc-floating-label {\n        color: rgba(51, 50, 50, 0.87);\n      }\n\n      .mdc-text-field--focused .mdc-floating-label {\n        color: var(--mat-primary);\n      }\n      \n      .mat-mdc-input-element,\n      .mdc-floating-label--float-above {\n        color: black;\n      }\n      \n      .mdc-line-ripple::before {\n        border-bottom-color: var(--mat-primary);\n      }\n      \n      .mat-mdc-form-field-error {\n        color: #f44336;\n      }\n    }\n\n    h3 {\n        color: #b0b0b0; // Lighter color for better visibility in dark mode\n      }\n      \n      .mat-selection-list {\n        .mat-list-option {\n          color: white !important; // Force white text\n          \n          .mdc-list-item__primary-text {\n            color: white !important; // Ensure text is white\n          }\n          \n          // Checkbox styling in dark mode\n          .mdc-checkbox {\n            .mdc-checkbox__background {\n              border-color: rgba(255, 255, 255, 0.54) !important;\n            }\n          }\n        }\n      }\n      \n      mat-error {\n        color: #f44336 !important;\n      }\n    \n\n    // Success message\n    .success-message {\n      background-color: #1e3a8a;\n      color: white;\n      \n      mat-icon {\n        color: white;\n      }\n    }\n\n    // Stepper styling\n    mat-horizontal-stepper {\n      background: transparent;\n      \n      .mat-step-header {\n        .mat-step-label {\n          color: white;\n        }\n        \n        .mat-step-icon {\n          background-color: #3f51b5;\n          color: white;\n        }\n        \n        &.cdk-keyboard-focused,\n        &:hover {\n          background-color: rgba(63, 81, 181, 0.12);\n        }\n      }\n      \n      .mat-stepper-horizontal-line {\n        border-top-color: #444;\n      }\n    }\n\n    // Step content\n    mat-step {\n      h2 {\n        color: white;\n      }\n      \n      .step-subtitle {\n        color: #b0b0b0;\n      }\n    }\n\n    // Select panel\n    .mat-mdc-select-panel {\n      background-color: #1e1e1e;\n      color: white;\n      \n      .mat-mdc-option {\n        &:hover:not(.mdc-list-item--disabled),\n        &.mdc-list-item--selected:not(.mdc-list-item--disabled) {\n          background-color: rgba(255, 255, 255, 0.08);\n        }\n        \n        &.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text {\n          color: var(--mat-primary);\n        }\n      }\n    }\n\n    // Datepicker\n    .mat-datepicker-content {\n      background-color: #1e1e1e;\n      color: white;\n      \n      .mat-calendar-body-cell-content {\n        color: white;\n      }\n      \n      .mat-calendar-body-selected {\n        background-color: #3f51b5;\n        color: white;\n      }\n    }\n      \n    // Radio buttons\n    .age-group-section {\n      h3 {\n        color: #706d6d;\n      }\n    }\n    .age-group-section {\n        .mat-selection-list {\n          .mat-list-option {\n           \n            color: white !important;\n            \n            .mdc-checkbox {\n              .mdc-checkbox__background {\n                border-color: rgba(242, 242, 242, 0.54) !important;\n              }\n            }\n          }\n        }\n      }\n  }\n\n  // Success message\n  .success-message {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    padding: 12px 16px;\n    margin-bottom: 24px;\n    background-color: #e3f2fd;\n    color: #0d47a1;\n    border-radius: 8px;\n    font-size: 14px;\n    \n    mat-icon {\n      color: #0d47a1;\n    }\n  }\n\n  // Stepper\n  mat-horizontal-stepper {\n    background: transparent;\n    \n    .mat-step-header {\n      .mat-step-label {\n        font-weight: 500;\n        color: rgba(0, 0, 0, 0.87);\n      }\n      \n      .mat-step-icon {\n        background-color: #3f51b5;\n        color: white;\n      }\n    }\n  }\n\n  // Step content\n  mat-step {\n    h2 {\n      font-size: 22px;\n      font-weight: 500;\n      margin-bottom: 8px;\n    }\n    \n    .step-subtitle {\n      font-size: 14px;\n      color: rgba(0, 0, 0, 0.6);\n      margin-bottom: 24px;\n    }\n  }\n\n  // Form grid\n  .form-grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 16px;\n    \n    @media (max-width: 600px) {\n      grid-template-columns: 1fr;\n    }\n  }\n\n  // Age Group Section (checkbox list)\n  .age-group-section {\n    grid-column: 1 / -1;\n    margin-bottom: 16px;\n    \n    h3 {\n      font-weight: 500;\n      margin-bottom: 12px;\n      color: rgba(0, 0, 0, 0.87);\n    }\n    \n    .mat-selection-list {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 12px;\n      padding: 0;\n      \n      .mat-list-option {\n        display: inline-block;\n        width: auto;\n        height: auto;\n        padding: 8px 16px;\n        border-radius: 16px;\n        background-color: #f5f5f5;\n        margin: 0;\n        \n        .mdc-list-item__primary-text {\n          display: flex;\n          align-items: center;\n        }\n\n        // Checkbox styling\n        .mdc-checkbox {\n          margin-right: 8px;\n        }\n      }\n    }\n    \n    mat-error {\n      margin-top: 8px;\n      font-size: 12px;\n      color: #f44336;\n    }\n  }\n\n  \n\n  // Buttons\n  .stepper-actions {\n    display: flex;\n    justify-content: space-between;\n    margin-top: 20px;\n    \n    button {\n      min-width: 120px;\n      font-weight: 500;\n      letter-spacing: 0.5px;\n      \n      &[color=\"primary\"] {\n        &:hover {\n          transform: translateY(-1px);\n        }\n      }\n    }\n  }\n\n  // Review section\n  .review-container {\n    .review-section {\n      margin-bottom: 24px;\n      \n      h3 {\n        font-size: 18px;\n        color: #3f51b5;\n        margin-bottom: 12px;\n        padding-bottom: 4px;\n        border-bottom: 1px solid #e0e0e0;\n      }\n      \n      .review-item {\n        font-size: 14px;\n        margin-bottom: 8px;\n        color: rgba(0, 0, 0, 0.87);\n        \n        strong {\n          font-weight: 500;\n          color: rgba(0, 0, 0, 0.6);\n        }\n      }\n    }\n  }\n\n  // Mobile\n  @media (max-width: 600px) {\n    padding: 16px;\n    margin: 1rem;\n    border-radius: 12px;\n    \n    .stepper-actions {\n      flex-direction: column-reverse;\n      gap: 8px;\n      \n      button {\n        width: 100%;\n      }\n    }\n\n    // Adjust age group checkboxes for mobile\n    .age-group-section {\n      .mat-selection-list {\n        flex-direction: column;\n        gap: 8px;\n        \n        .mat-list-option {\n          width: 100%;\n        }\n      }\n    }\n  }\n}",
                    "styleUrl": "./analytics.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "darkModeService",
                        "type": "DarkModeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 85,
                "jsdoctags": [
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "darkModeService",
                        "type": "DarkModeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "firstName": {
                    "name": "firstName",
                    "getSignature": {
                        "name": "firstName",
                        "type": "",
                        "returnType": "",
                        "line": 119
                    }
                },
                "lastName": {
                    "name": "lastName",
                    "getSignature": {
                        "name": "lastName",
                        "type": "",
                        "returnType": "",
                        "line": 120
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "",
                        "line": 121
                    }
                },
                "phone": {
                    "name": "phone",
                    "getSignature": {
                        "name": "phone",
                        "type": "",
                        "returnType": "",
                        "line": 122
                    }
                },
                "gender": {
                    "name": "gender",
                    "getSignature": {
                        "name": "gender",
                        "type": "",
                        "returnType": "",
                        "line": 123
                    }
                },
                "dob": {
                    "name": "dob",
                    "getSignature": {
                        "name": "dob",
                        "type": "",
                        "returnType": "",
                        "line": 124
                    }
                },
                "ageGroup": {
                    "name": "ageGroup",
                    "getSignature": {
                        "name": "ageGroup",
                        "type": "",
                        "returnType": "",
                        "line": 125
                    }
                },
                "address": {
                    "name": "address",
                    "getSignature": {
                        "name": "address",
                        "type": "",
                        "returnType": "",
                        "line": 126
                    }
                },
                "country": {
                    "name": "country",
                    "getSignature": {
                        "name": "country",
                        "type": "",
                        "returnType": "",
                        "line": 127
                    }
                },
                "state": {
                    "name": "state",
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 128
                    }
                },
                "zipCode": {
                    "name": "zipCode",
                    "getSignature": {
                        "name": "zipCode",
                        "type": "",
                        "returnType": "",
                        "line": 129
                    }
                }
            },
            "templateData": "<div class=\"form-container\" [@fadeIn] [class.dark-mode]=\"darkModeService.darkMode()\">\n  <div *ngIf=\"showSuccessMessage\" class=\"success-message\">\n    <mat-icon>check_circle</mat-icon>\n    <span>Form submitted successfully!</span>\n  </div>\n\n  <mat-horizontal-stepper [linear]=\"isLinear\" #stepper [orientation]=\"isMobile ? 'vertical' : 'horizontal'\">\n    <!-- Step 1: Personal Details -->\n    <mat-step [stepControl]=\"firstFormGroup\" label=\"Personal Details\" [@slideIn]>\n      <form [formGroup]=\"firstFormGroup\">\n        <h2>Personal Information</h2>\n        \n        <div class=\"form-grid\">\n          <mat-form-field appearance=\"fill\">\n            <mat-label>First Name</mat-label>\n            <input matInput formControlName=\"firstName\" required placeholder=\"First Name\">\n            <mat-error *ngIf=\"firstName?.hasError('required')\">\n              First name is required\n            </mat-error>\n            <mat-error *ngIf=\"firstName?.hasError('minlength')\">\n              Minimum 2 characters required\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Last Name</mat-label>\n            <input matInput formControlName=\"lastName\" required placeholder=\"Last Name\">\n            <mat-error *ngIf=\"lastName?.hasError('required')\">\n              Last name is required\n            </mat-error>\n            <mat-error *ngIf=\"lastName?.hasError('minlength')\">\n              Minimum 2 characters required\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Email</mat-label>\n            <input matInput formControlName=\"email\" type=\"email\" required placeholder=\"Email\">\n            <mat-error *ngIf=\"email?.hasError('required')\">\n              Email is required\n            </mat-error>\n            <mat-error *ngIf=\"email?.hasError('email')\">\n              Please enter a valid email\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Phone Number</mat-label>\n            <input matInput formControlName=\"phone\" type=\"tel\" placeholder=\"Phone Number\">\n            <mat-error *ngIf=\"phone?.hasError('pattern')\">\n              Please enter a valid phone number (10-15 digits)\n            </mat-error>\n          </mat-form-field>\n        </div>\n        \n        <div class=\"stepper-actions\">\n          <button mat-button matStepperNext color=\"primary\" [disabled]=\"firstFormGroup.invalid\">Next</button>\n        </div>\n      </form>\n    </mat-step>\n\n    <!-- Step 2: Demographic Info -->\n    <mat-step [stepControl]=\"secondFormGroup\" label=\"Demographic Info\" [@slideIn]>\n      <form [formGroup]=\"secondFormGroup\">\n        <h2>Additional Information</h2>\n        <p class=\"step-subtitle\">Help us know you better</p>\n        \n        <div class=\"form-grid\">\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Gender</mat-label>\n            <mat-select formControlName=\"gender\" required>\n              <mat-option *ngFor=\"let gender of genders\" [value]=\"gender.value\">\n                {{ gender.viewValue }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"gender?.hasError('required')\">\n              Gender is required\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Date of Birth</mat-label>\n            <input matInput [matDatepicker]=\"dobPicker\" formControlName=\"dob\" required>\n            <mat-datepicker-toggle matSuffix [for]=\"dobPicker\"></mat-datepicker-toggle>\n            <mat-datepicker #dobPicker></mat-datepicker>\n            <mat-error *ngIf=\"dob?.hasError('required')\">\n              Date of birth is required\n            </mat-error>\n          </mat-form-field>\n\n          <div class=\"age-group-section\" [class.dark-mode]=\"darkModeService.darkMode()\">\n            <h3>Age Group</h3>\n            <mat-selection-list formControlName=\"ageGroup\" class=\"age-group-grid\">\n              <mat-list-option *ngFor=\"let age of ageGroups\" [value]=\"age\">\n              <h3> {{ age }}</h3> \n              </mat-list-option>\n            </mat-selection-list>\n            <mat-error *ngIf=\"ageGroup?.invalid && (ageGroup?.dirty || ageGroup?.touched)\">\n              Please select at least one age group\n            </mat-error>\n          </div>\n        </div>\n        \n        <div class=\"stepper-actions\">\n          <button mat-button matStepperPrevious>Back</button>\n          <button mat-button matStepperNext color=\"primary\" [disabled]=\"secondFormGroup.invalid\">Next</button>\n        </div>\n      </form>\n    </mat-step>\n\n    <!-- Step 3: Address -->\n    <mat-step [stepControl]=\"thirdFormGroup\" label=\"Address\" [@slideIn]>\n      <form [formGroup]=\"thirdFormGroup\">\n        <h2>Address Information</h2>\n        <p class=\"step-subtitle\">Where can we reach you?</p>\n        \n        <div class=\"form-grid\">\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Address</mat-label>\n            <textarea matInput formControlName=\"address\" required placeholder=\"Address\"></textarea>\n            <mat-error *ngIf=\"address?.hasError('required')\">\n              Address is required\n            </mat-error>\n            <mat-error *ngIf=\"address?.hasError('minlength')\">\n              Minimum 10 characters required\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Country</mat-label>\n            <mat-select formControlName=\"country\" required>\n              <mat-option *ngFor=\"let country of countries\" [value]=\"country.value\">\n                {{ country.viewValue }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"country?.hasError('required')\">\n              Country is required\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"fill\">\n            <mat-label>State/Province</mat-label>\n            <mat-select formControlName=\"state\" required>\n              <mat-option *ngFor=\"let state of states\" [value]=\"state.value\">\n                {{ state.viewValue }}\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"state?.hasError('required')\">\n              State is required\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Zip/Postal Code</mat-label>\n            <input matInput formControlName=\"zipCode\" required placeholder=\"Zip/Postal Code\">\n            <mat-error *ngIf=\"zipCode?.hasError('required')\">\n              Zip code is required\n            </mat-error>\n            <mat-error *ngIf=\"zipCode?.hasError('pattern')\">\n              Please enter a valid zip code (5-10 digits)\n            </mat-error>\n          </mat-form-field>\n        </div>\n        \n        <div class=\"stepper-actions\">\n          <button mat-button matStepperPrevious>Back</button>\n          <button mat-button color=\"primary\" (click)=\"onSubmit(stepper)\" [disabled]=\"thirdFormGroup.invalid\">Review & Submit</button>\n        </div>\n      </form>\n    </mat-step>\n\n    <!-- Step 4: Review -->\n    <mat-step label=\"Review\" [@slideIn]>\n      <div *ngIf=\"submittedData\" class=\"review-container\">\n        <h2>Review Your Information</h2>\n        <p class=\"step-subtitle\">Please verify your details before submission</p>\n        \n        <div class=\"review-section\">\n          <h3>Personal Information</h3>\n          <div class=\"review-item\">\n            <strong>Name:</strong> {{ submittedData.firstName }} {{ submittedData.lastName }}\n          </div>\n          <div class=\"review-item\">\n            <strong>Email:</strong> {{ submittedData.email }}\n          </div>\n          <div class=\"review-item\">\n            <strong>Phone:</strong> {{ submittedData.phone || 'Not provided' }}\n          </div>\n        </div>\n\n        <div class=\"review-section\">\n          <h3>Demographic Information</h3>\n          <div class=\"review-item\">\n            <strong>Gender:</strong> {{ getGenderViewValue(submittedData.gender) }}\n          </div>\n          <div class=\"review-item\">\n            <strong>Date of Birth:</strong> {{ submittedData.dob | date }}\n          </div>\n          <div class=\"review-item\">\n            <strong>Age Group:</strong> {{ submittedData.ageGroup.join(', ') }}\n          </div>\n        </div>\n\n        <div class=\"review-section\">\n          <h3>Address Information</h3>\n          <div class=\"review-item\">\n            <strong>Address:</strong> {{ submittedData.address }}\n          </div>\n          <div class=\"review-item\">\n            <strong>Country:</strong> {{ getCountryViewValue(submittedData.country) }}\n          </div>\n          <div class=\"review-item\">\n            <strong>State:</strong> {{ getStateViewValue(submittedData.state) }}\n          </div>\n          <div class=\"review-item\">\n            <strong>Zip Code:</strong> {{ submittedData.zipCode }}\n          </div>\n        </div>\n\n        <div class=\"stepper-actions\">\n          <button mat-button matStepperPrevious>Back</button>\n          <button mat-button color=\"primary\" (click)=\"finalSubmit(stepper)\">Confirm & Submit</button>\n        </div>\n      </div>\n    </mat-step>\n  </mat-horizontal-stepper>\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d456569963e346fc736e24b55129fdcfdc6b87a82a9c36e5cad058bbc63de4615fad59647c318a0ae3122d19adce4998bc3b5ef3310c094cf46d4dd4a329e00b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collapsed",
                    "defaultValue": "signal(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "currentLanguage",
                    "defaultValue": "signal('English')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "darkModeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DarkModeService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "responsiveService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResponsiveService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "sidenavMode",
                    "defaultValue": "computed(() => {\n    return this.responsiveService.isMobile() ? 'over' : 'side';\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "sidenavOpened",
                    "defaultValue": "computed(() => {\n    return !this.responsiveService.isMobile() || !this.collapsed();\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "sidenavWidth",
                    "defaultValue": "computed(() => {\n    if (this.responsiveService.isMobile()) return '280px';\n    return this.collapsed() ? '64px' : '200px';\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "themeService",
                    "defaultValue": "inject(ThemeService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                }
            ],
            "methodsClass": [
                {
                    "name": "setLanguage",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "\"light\" | \"dark\" | \"auto\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "\"light\" | \"dark\" | \"auto\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleFullScreen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSidenav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatToolbarModule",
                    "type": "module"
                },
                {
                    "name": "MatSidenavModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatBadgeModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "UserComponent",
                    "type": "component"
                },
                {
                    "name": "CustomSidenavComponent",
                    "type": "component"
                },
                {
                    "name": "TranslocoRootModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, computed, effect, inject, signal } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { TranslocoRootModule } from './transloco-root.module';\nimport { ThemeService } from './services/theme/theme.service';\nimport { UserComponent } from \"./user/user.component\";\nimport { DarkModeService } from './services/dark-theme/dark-mode.service';\nimport { ResponsiveService } from './services/responsive/responsive.service';\nimport { CustomSidenavComponent } from './components/custom-sidenav/custom-sidenav.component'; // Adjust path as needed\n\n@Component({\n    selector: 'app-root',\n    standalone: true,\n    imports: [\n        RouterOutlet,\n        CommonModule,\n        MatButtonModule,\n        MatIconModule,\n        MatToolbarModule,\n        MatSidenavModule,\n        MatMenuModule,\n        MatBadgeModule,\n        MatTooltipModule,\n        UserComponent,\n        CustomSidenavComponent, \n        TranslocoRootModule\n    ],\n    templateUrl: './app.component.html',\n    styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n  collapsed = signal(true);\n    currentLanguage = signal('English');\n\n\n  toggleFullScreen() {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen().catch(err => {\n        console.error(`Error attempting to enable fullscreen: ${err.message}`);\n      });\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n    }\n  }\n\n  setLanguage(lang: string) {\n    this.currentLanguage.set(lang === 'en' ? 'English' : 'French');\n  }\n\n  constructor(\n    public darkModeService: DarkModeService,\n    public responsiveService: ResponsiveService\n  ) {}\n\n  setTheme(theme: 'light' | 'dark' | 'auto') {\n    if (theme === 'auto') {\n      localStorage.removeItem('darkMode');\n      this.darkModeService.darkMode.set(window.matchMedia('(prefers-color-scheme: dark)').matches);\n    } else {\n      const isDark = theme === 'dark';\n      this.darkModeService.darkMode.set(isDark);\n      localStorage.setItem('darkMode', String(isDark));\n    }\n  }\n\n  //theme\n  themeService = inject(ThemeService);\n\n  //sid nav \n\n  sidenavWidth = computed(() => {\n    if (this.responsiveService.isMobile()) return '280px';\n    return this.collapsed() ? '64px' : '200px';\n  });\n\n  sidenavMode = computed(() => {\n    return this.responsiveService.isMobile() ? 'over' : 'side';\n  });\n\n  sidenavOpened = computed(() => {\n    return !this.responsiveService.isMobile() || !this.collapsed();\n  });\n\n\n  toggleSidenav() {\n    this.collapsed.set(!this.collapsed());\n  }\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "darkModeService",
                        "type": "DarkModeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "responsiveService",
                        "type": "ResponsiveService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "darkModeService",
                        "type": "DarkModeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "responsiveService",
                        "type": "ResponsiveService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div [class.dark-mode]=\"darkModeService.darkMode()\">\n\n<div class=\"header-wrapper\">\n  <mat-toolbar class=\"header-toolbar\">\n    <!-- Left-aligned elements -->\n    <div class=\"left-section\">\n      <!-- side bar button -->\n      <button mat-icon-button class=\"header-icon\" (click)=\"toggleSidenav()\">\n        <mat-icon>menu</mat-icon>\n      </button>\n      <span class=\"app-title\">Angular</span>\n    </div>\n\n   <!-- Right-aligned elements -->\n<div class=\"right-section\">\n  <!-- full screen-->\n  <button mat-icon-button class=\"header-icon\" (click)=\"toggleFullScreen()\" matTooltip=\"Full Screen\">\n    <mat-icon>fullscreen</mat-icon>\n  </button>\n\n  <!-- Dark mode toggle -->\n  <button mat-icon-button \n          class=\"dark-mode-toggle\"\n          (click)=\"darkModeService.toggle()\" \n          matTooltip=\"Toggle Dark Mode\">\n    <mat-icon>{{ darkModeService.darkMode() ? 'dark_mode' : 'light_mode' }}</mat-icon>\n  </button>\n\n  <!-- Theme selector -->\n  <button mat-icon-button \n          [matMenuTriggerFor]=\"themeMenu\" \n          matTooltip=\"Theme\"\n          class=\"dark-mode-toggle\">\n    <mat-icon>format_color_fill</mat-icon>\n  </button>\n  <mat-menu #themeMenu=\"matMenu\" class=\"color-theme-menu\">\n    @for (theme of themeService.getThemes(); track theme.id) {\n    <button mat-menu-item (click)=\"themeService.setTheme(theme.id)\">\n      <div class=\"theme-menu-item\">\n        <div\n          class=\"color-preview\"\n          [style.background-color]=\"theme.primary\"\n        ></div>\n        <span>{{ theme.displayName }}</span>\n      </div>\n    </button>\n    }\n  </mat-menu>\n\n  <!-- language -->\n  <button mat-button [matMenuTriggerFor]=\"languageMenu\" matTooltip=\"Language\" class=\"languageMenu\">\n    <span>{{ currentLanguage() }}</span>\n    <mat-icon>arrow_drop_down</mat-icon>\n  </button>\n  <mat-menu #languageMenu=\"matMenu\" class=\"language-menu\">\n    <button mat-menu-item (click)=\"setLanguage('en')\">\n      <span>English</span>\n    </button>\n    <button mat-menu-item (click)=\"setLanguage('fr')\">\n      <span>French</span>\n    </button>\n  </mat-menu>\n\n  <!-- Profile -->\n  <app-user></app-user>\n</div>\n  </mat-toolbar>\n</div>\n\n<main class=\"main-content\">\n  <mat-sidenav-container class=\"h-full\">\n    <mat-sidenav \n      #sidenav\n      [mode]=\"sidenavMode()\"\n      [opened]=\"sidenavOpened()\"\n      [style.width]=\"sidenavWidth()\" \n      class=\"transition-all duration-300\"\n      [fixedInViewport]=\"responsiveService.isMobile()\"\n      [fixedTopGap]=\"48\">\n      <app-custom-sidenav [collapsed]=\"collapsed()\"></app-custom-sidenav>\n    </mat-sidenav>\n    <mat-sidenav-content \n      [style.margin-left]=\"responsiveService.isMobile() ? '0px' : sidenavWidth()\" \n      class=\"content transition-all duration-300\"\n      (click)=\"responsiveService.isMobile() && sidenav.close()\">\n      <router-outlet></router-outlet>\n    </mat-sidenav-content>\n  </mat-sidenav-container>\n</main>\n\n\n<!-- footer -->\n<footer class=\"footer\">\n  <div class=\"footer-content\">\n    <a>© 2025 Your Angular All rights reserved.</a>\n    <div class=\"footer-links\">\n      <a href=\"#\">Privacy Policy</a>\n      <a href=\"#\">Terms of Service</a>\n      <a href=\"#\">Contact Us</a>\n    </div>\n  </div>\n</footer>\n\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-fee32fa29265f4fab44e3195ef33fe5726d6d49595e7ff3ddc2f6f30447005c7001b4e32248c51eee790353aa299a6ee7854f2f310e9aee594ff7ed98ac98a97",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 774,
                            "end": 787,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 775,
                                "end": 783,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary\n      ? 'storybook-button--primary'\n      : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: \"Nunito Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #1ea7fd;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "CommentComponent",
            "id": "component-CommentComponent-73c00e962556213a60abcbd47573d253f1ec5c8a52e683a39f1bc60dcaa984a41e9af493de0eb3289844b3bc8c6f935c9044f2b827c486908b1ed942343f2b43",
            "file": "src/app/pages/comment/comment.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-comment",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./comment.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { DarkModeService } from 'src/app/services/dark-theme/dark-mode.service';\n\n@Component({\n  selector: 'app-comment',\n  templateUrl: './comment.component.html',\n  styleUrl: './comment.component.scss'\n})\nexport class CommentComponent {\n\n}\n",
            "styleUrl": "./comment.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>comment works!</p>\n"
        },
        {
            "name": "ContentComponent",
            "id": "component-ContentComponent-3cf4ad530f427626107f3583c33f0e2ab75d88ee0b800afce688fc0a4f103a1cd78b25c90de39237ddc1e35fb233197c141dcc5e043a213af87ecc4b8b7c99a4",
            "file": "src/app/pages/content/content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-content",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./content.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { DarkModeService } from 'src/app/services/dark-theme/dark-mode.service';\n\n@Component({\n  selector: 'app-content',\n  templateUrl: './content.component.html',\n  styleUrl: './content.component.scss'\n})\nexport class ContentComponent {\n\n}\n",
            "styleUrl": "./content.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>content works!</p>\n"
        },
        {
            "name": "CustomSidenavComponent",
            "id": "component-CustomSidenavComponent-bcfaefaed1621a27018348a8526a55ac7d0242dfaa9ac604f72a658f76b66161286a200a015c581d9a3a5a4a537d5bbbc8c3e1fd3d98d18bd923f08412286bdf",
            "file": "src/app/components/custom-sidenav/custom-sidenav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-custom-sidenav",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./custom-sidenav.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "collapsed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentTheme",
                    "defaultValue": "computed(() => this.themeService.currentTheme())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "darkModeService",
                    "defaultValue": "inject(DarkModeService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "menuItems",
                    "defaultValue": "signal<MenuItem[]>([\n    { icon: 'dashboard', label: 'Dashboard', route: 'dashboard' },\n    { icon: 'assignment', label: 'Form', route: 'form' },\n    { icon: 'analytics', label: 'Analytics', route: 'analytics' },\n    { icon: 'comment', label: 'Comments', route: 'comments' },\n    { icon: 'store', label: 'Store', route: 'store' },\n    { icon: 'group', label: 'Employee', route: 'employee' }\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "responsiveService",
                    "defaultValue": "inject(ResponsiveService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "sideNavCollapsed",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "themeService",
                    "defaultValue": "inject(ThemeService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, computed, Input, signal, inject } from '@angular/core';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { DarkModeService } from 'src/app/services/dark-theme/dark-mode.service';\nimport { ResponsiveService } from 'src/app/services/responsive/responsive.service';\nimport { ThemeService } from 'src/app/services/theme/theme.service'; \n\ninterface MenuItem {\n  icon: string;\n  label: string;\n  route: string;\n}\n\n@Component({\n  selector: 'app-custom-sidenav',\n  standalone: true,\n  imports: [CommonModule, MatListModule, MatIconModule, RouterModule],\n  templateUrl: './custom-sidenav.component.html',\n  styleUrl: './custom-sidenav.component.scss'\n})\nexport class CustomSidenavComponent {\n  public responsiveService = inject(ResponsiveService);\n  public darkModeService = inject(DarkModeService);\n  public themeService = inject(ThemeService);\n  \n  menuItems = signal<MenuItem[]>([\n    { icon: 'dashboard', label: 'Dashboard', route: 'dashboard' },\n    { icon: 'assignment', label: 'Form', route: 'form' },\n    { icon: 'analytics', label: 'Analytics', route: 'analytics' },\n    { icon: 'comment', label: 'Comments', route: 'comments' },\n    { icon: 'store', label: 'Store', route: 'store' },\n    { icon: 'group', label: 'Employee', route: 'employee' }\n  ]);\n\n  sideNavCollapsed = signal(false);\n  @Input() set collapsed(val: boolean) {\n    this.sideNavCollapsed.set(val);\n  }\n\n  // Access the current theme\n  currentTheme = computed(() => this.themeService.currentTheme());\n}",
            "styleUrl": "./custom-sidenav.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "collapsed": {
                    "name": "collapsed",
                    "setSignature": {
                        "name": "collapsed",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"side-nav\" \n     [class.dark-mode]=\"darkModeService.darkMode()\"\n     [class]=\"currentTheme().id + '-theme'\">  <mat-nav-list>\n    <a\n      mat-list-item\n      class=\"menu-item\"\n      *ngFor=\"let item of menuItems()\"\n      [routerLink]=\"item.route\"\n      routerLinkActive=\"selected-menu-item\"\n      #rla=\"routerLinkActive\"\n      [ngClass]=\"{\n        'collapsed': sideNavCollapsed() && !responsiveService.isMobile()\n      }\"\n    >\n      <mat-icon \n        [fontSet]=\"rla.isActive ? 'material-icons' : 'material-icons-outlined'\" \n        matListItemIcon\n        [class.dark-icon]=\"darkModeService.darkMode()\"\n      >\n        {{ item.icon }}\n      </mat-icon>\n      <span *ngIf=\"!sideNavCollapsed() || responsiveService.isMobile()\" class=\"label-text\">{{ item.label }}</span>\n    </a>\n  </mat-nav-list>\n</div>"
        },
        {
            "name": "Dashboard_Component",
            "id": "component-Dashboard_Component-4490374702e6abfcf4af306803b9625ccf899f610bb9e673eacb8c9a8176d388ac4e1b5f27e76b72dfea894924a94f0ad57a52bf3bf0c03fa66f4e7fc2da83f3",
            "file": "src/app/pages/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dashboard-component",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "darkModeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DarkModeService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { DarkModeService } from 'src/app/services/dark-theme/dark-mode.service';\n\n@Component({\n  selector: 'dashboard-component',\n  templateUrl: './dashboard.component.html',\n  styleUrl: './dashboard.component.scss'\n})\nexport class Dashboard_Component {\n    constructor(public darkModeService: DarkModeService) {}\n}",
            "styleUrl": "./dashboard.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "darkModeService",
                        "type": "DarkModeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "darkModeService",
                        "type": "DarkModeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<p [class.dark-mode]=\"darkModeService.darkMode()\">dashboard works!</p>"
        },
        {
            "name": "EmployeeComponent",
            "id": "component-EmployeeComponent-0c3cf66290b56d8f50dab126508af68625c2c7b86f49828cd9ea372aff14903ce25c808fc1c3ff0b7ef868b2d88941a2e6d90f897a81d4233f4c977ec641a418",
            "file": "src/app/pages/Employee/employee/employee.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-employee",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./employee.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cdr",
                    "defaultValue": "inject(ChangeDetectorRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "darkModeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DarkModeService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<Employee>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "dialog",
                    "defaultValue": "inject(MatDialog)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['id', 'name', 'company', 'bs', 'website', 'action']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "pageSize",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "pageSizeOptions",
                    "defaultValue": "[5, 10, 25]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "searchTerm",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "store",
                    "defaultValue": "inject(EmployeeStore)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "toastr",
                    "defaultValue": "inject(ToastrService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "addemployee",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "applyFilter",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DeleteEmployee",
                    "args": [
                        {
                            "name": "empId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "empId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "EditEmployee",
                    "args": [
                        {
                            "name": "empId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "empId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openpopup",
                    "args": [
                        {
                            "name": "empId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "empId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "MatPaginatorModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, effect, inject, OnDestroy, OnInit, ViewChild, ChangeDetectorRef } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\nimport { AddEmployeeComponent } from '../add-employee/add-employee.component';\nimport { Employee } from '../Employee';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nimport { CommonModule } from '@angular/common';\nimport { EmployeeStore } from '../store/employee-store';\nimport { ToastrService } from 'ngx-toastr';\nimport { DarkModeService } from '../../../services/dark-theme/dark-mode.service';\nimport { FormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\n\n@Component({\n  selector: 'app-employee',\n  standalone: true,\n  imports: [\n    MatCardModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatTableModule,\n    MatPaginatorModule,\n    CommonModule,\n    FormsModule,\n    MatInputModule,\n  ],\n  templateUrl: './employee.component.html',\n  styleUrl: './employee.component.scss',\n})\nexport class EmployeeComponent implements OnInit, OnDestroy {\n  store = inject(EmployeeStore);\n  toastr = inject(ToastrService);\n  dataSource = new MatTableDataSource<Employee>([]);\n  displayedColumns: string[] = ['id', 'name', 'company', 'bs', 'website', 'action'];\n  private dialog = inject(MatDialog);\n  private cdr = inject(ChangeDetectorRef); // Inject ChangeDetectorRef\n\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  pageSizeOptions: number[] = [5, 10, 25];\n  pageSize = 5;\n  searchTerm: string = '';\n\n  constructor(\n    public darkModeService: DarkModeService\n  ) {\n    effect(() => {\n      this.dataSource.data = this.store.employees();\n      // Set paginator only if initialized\n      if (this.paginator) {\n        this.dataSource.paginator = this.paginator;\n      }\n      if (this.store.error()) {\n        this.toastr.error(this.store.error());\n      }\n      // Trigger change detection after updating dataSource\n      this.cdr.detectChanges();\n    });\n  }\n\n  ngOnInit(): void {\n    this.store.loadEmployees();\n    this.dataSource.filterPredicate = (data: Employee, filter: string) => {\n      const searchTerm = filter.toLowerCase();\n      return data.name.toLowerCase().includes(searchTerm) ||\n             data.company.toLowerCase().includes(searchTerm) ||\n             data.bs.toLowerCase().includes(searchTerm) ||\n             data.website.toLowerCase().includes(searchTerm) ||\n             data.id.toString().includes(searchTerm);\n    };\n  }\n\n  ngOnDestroy(): void {}\n\n  addemployee() {\n    this.openpopup(0);\n  }\n\n  DeleteEmployee(empId: number) {\n    this.store.deleteEmployee(empId);\n  }\n\n  EditEmployee(empId: number) {\n    this.openpopup(empId);\n  }\n\n  openpopup(empId: number) {\n    this.dialog.open(AddEmployeeComponent, {\n      width: '50%',\n      exitAnimationDuration: '1000ms',\n      enterAnimationDuration: '1000ms',\n      data: { empId },\n    });\n  }\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    \n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n    // Trigger change detection after filtering\n    this.cdr.detectChanges();\n  }\n}",
            "styleUrl": "./employee.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "darkModeService",
                        "type": "DarkModeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "darkModeService",
                        "type": "DarkModeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-card [class.dark-mode]=\"darkModeService.darkMode()\">\n  <mat-card-header>\n    <div class=\"search-container\">\n      <input \n        matInput \n        placeholder=\"Search employees...\" \n        [(ngModel)]=\"searchTerm\" \n        (input)=\"applyFilter($event)\"\n        class=\"search-input\"\n      >\n    </div>\n    <button mat-raised-button color=\"primary\" (click)=\"addemployee()\">Add New</button>\n  </mat-card-header>\n  <mat-card-content>\n    <div class=\"table-container\">\n      <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n        <ng-container matColumnDef=\"id\">\n          <th mat-header-cell *matHeaderCellDef>Employee Id</th>\n          <td mat-cell *matCellDef=\"let element\">{{element.id}}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"name\">\n          <th mat-header-cell *matHeaderCellDef>Name</th>\n          <td mat-cell *matCellDef=\"let element\">{{element.name}}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"company\">\n          <th mat-header-cell *matHeaderCellDef>Company</th>\n          <td mat-cell *matCellDef=\"let element\">{{element.company}}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"bs\">\n          <th mat-header-cell *matHeaderCellDef>Business Strategy</th>\n          <td mat-cell *matCellDef=\"let element\">{{element.bs}}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"website\">\n          <th mat-header-cell *matHeaderCellDef>Website</th>\n          <td mat-cell *matCellDef=\"let element\">{{element.website}}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"action\">\n          <th mat-header-cell *matHeaderCellDef>Action</th>\n          <td mat-cell *matCellDef=\"let element\">\n            <button mat-raised-button color=\"primary\" (click)=\"EditEmployee(element.id)\">Edit</button>\n            <button mat-raised-button color=\"accent\" (click)=\"DeleteEmployee(element.id)\">Delete</button>\n          </td>\n        </ng-container>\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n      </table>\n      <mat-paginator\n        [pageSizeOptions]=\"pageSizeOptions\"\n        [pageSize]=\"pageSize\"\n        showFirstLastButtons\n        aria-label=\"Select page of employees\">\n      </mat-paginator>\n    </div>\n    <div class=\"card-view\" [class.dark-mode]=\"darkModeService.darkMode()\">\n      <div *ngFor=\"let element of dataSource.filteredData | slice: (paginator?.pageIndex * paginator?.pageSize) : ((paginator?.pageIndex + 1) * paginator?.pageSize)\" class=\"employee-card\">\n        <div class=\"employee-field\">\n          <span class=\"label\">ID</span>\n          <span class=\"value\">{{element.id}}</span>\n        </div>\n        <div class=\"employee-field\">\n          <span class=\"label\">Name</span>\n          <span class=\"value\">{{element.name}}</span>\n        </div>\n        <div class=\"employee-field\">\n          <span class=\"label\">Company</span>\n          <span class=\"value\">{{element.company}}</span>\n        </div>\n        <div class=\"employee-field\">\n          <span class=\"label\">Business Strategy</span>\n          <span class=\"value\">{{element.bs}}</span>\n        </div>\n        <div class=\"employee-field\">\n          <span class=\"label\">Website</span>\n          <span class=\"value\">{{element.website}}</span>\n        </div>\n        <div class=\"actions\">\n          <button mat-raised-button color=\"primary\" (click)=\"EditEmployee(element.id)\">Edit</button>\n          <button mat-raised-button color=\"accent\" (click)=\"DeleteEmployee(element.id)\">Delete</button>\n        </div>\n      </div>\n      <mat-paginator\n        [pageSizeOptions]=\"pageSizeOptions\"\n        [pageSize]=\"pageSize\"\n        showFirstLastButtons\n        aria-label=\"Select page of employees\">\n      </mat-paginator>\n    </div>\n  </mat-card-content>\n</mat-card>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-cf2833c0ed026e2708310372a9c59614d1ed7cfa0d3d16faa34c3c45c955f083dc25a5415e2e71cccce80a85b07314fa7a29593455cb80668a5e92059155cc3b",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg\n          width=\"32\"\n          height=\"32\"\n          viewBox=\"0 0 32 32\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg\n          width=\"32\"\n          height=\"32\"\n          viewBox=\"0 0 32 32\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: \"Nunito Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-f339e64096c17a2279bed7ca4737b0d7c52eddb2150563e1bc46f2c65f92bf4673aba333c4eb3be66e1993105ded0701ff70a7c7e62dac168aa75229d1c7b5da",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a\n          href=\"https://componentdriven.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page\n        states without needing to navigate to them in your app. Here are some\n        handy patterns for managing page data in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose\n          such data from the \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock\n          these services out using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a\n          href=\"https://storybook.js.org/tutorials/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a\n          href=\"https://storybook.js.org/docs\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg\n          width=\"10\"\n          height=\"10\"\n          viewBox=\"0 0 12 12\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 88
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a\n          href=\"https://componentdriven.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page\n        states without needing to navigate to them in your app. Here are some\n        handy patterns for managing page data in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose\n          such data from the \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock\n          these services out using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a\n          href=\"https://storybook.js.org/tutorials/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a\n          href=\"https://storybook.js.org/docs\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg\n          width=\"10\"\n          height=\"10\"\n          viewBox=\"0 0 12 12\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: \"Nunito Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: #1ea7fd;\n  text-decoration: none;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #66bf3c;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "StoreComponent",
            "id": "component-StoreComponent-0d125e44bd89935cff1f5bbf1c2e329c5d20fdee9391cb93e6f1d36866d3b8a6899cc251b733b6a380027e6836c20d68043cbedf7961646ba231ff6991b01f11",
            "file": "src/app/pages/store/store.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-store",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./store.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "darkModeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DarkModeService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "newTodoTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "searchTerm",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "store",
                    "defaultValue": "inject(TodoStore)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "submitNewTodo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, inject } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { TodoStore } from './ng/todos.store';\nimport { FormsModule } from '@angular/forms';\nimport { DarkModeService } from '../../services/dark-theme/dark-mode.service';\n\n@Component({\n  selector: 'app-store',\n  standalone: true,\n  imports: [FormsModule, CommonModule, RouterModule],\n  templateUrl: './store.component.html',\n  styleUrl: './store.component.scss'\n})\nexport class StoreComponent {\n  searchTerm = '';\n  store = inject(TodoStore);\n  newTodoTitle = ''; \n\n  constructor(public darkModeService: DarkModeService) {}\n\n  \n    submitNewTodo() {\n      if (this.newTodoTitle.trim()) {  // Add .trim() to check for empty strings\n        console.log('Adding todo:', this.newTodoTitle);  // Better logging\n        this.store.addTodo(this.newTodoTitle.trim());\n        this.newTodoTitle = '';\n      }\n  }\n}",
            "styleUrl": "./store.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "darkModeService",
                        "type": "DarkModeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "darkModeService",
                        "type": "DarkModeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<main class=\"task-manager-container\" [class.dark-mode]=\"darkModeService.darkMode()\">\n  <div class=\"task-manager-card\">\n    <!-- Header -->\n    <div class=\"task-manager-header\">\n      <h1>Task Manager</h1>\n      <span class=\"task-counter\">\n        {{ store.completedTodos().length }} / {{ store.todos().length }} completed\n      </span>\n    </div>\n\n    <!-- Search -->\n    <div class=\"search-container\">\n      <div class=\"search-input-wrapper\">\n        <div class=\"search-icon\">\n          <svg class=\"search-svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n          </svg>\n        </div>\n        <input \n          name=\"searchTodos\" \n          [(ngModel)]=\"searchTerm\" \n          class=\"search-input\" \n          placeholder=\"Search todos..\" \n          (ngModelChange)=\"store.updateSearchTerm($event)\"\n        >\n      </div>\n    </div>\n\n    <form class=\"add-task-form\">\n      <input\n        name=\"newTodoInput\"\n        [(ngModel)]=\"newTodoTitle\"\n        class=\"task-input\"\n        placeholder=\"Add a new task...\"\n        (keyup.enter)=\"submitNewTodo()\" \n      />\n      <button \n        type=\"button\" \n        class=\"add-button\"\n        [disabled]=\"!newTodoTitle?.trim()\"\n        (click)=\"submitNewTodo()\" \n      >\n        Add\n      </button>\n    </form>\n\n    @if (store.todosLoading()) {\n      <div class=\"loading-indicator\">Loading tasks...</div>\n    }\n    @else if (store.todosLoadingError()) {\n      <div class=\"error-message\">Error loading tasks. Showing local data.</div>\n    }\n\n     <!-- Filters -->\n     <div class=\"filter-buttons\">\n      <button\n        [class.active-filter]=\"store.filter() === 'all'\"\n        (click)=\"store.changeFilter('all')\"\n        class=\"filter-button\"\n      >\n        All\n      </button>\n      <button\n        [class.active-filter]=\"store.filter() === 'active'\"\n        (click)=\"store.changeFilter('active')\"\n        class=\"filter-button\"\n      >\n        Active\n      </button>\n      <button\n        [class.active-filter]=\"store.filter() === 'completed'\"\n        (click)=\"store.changeFilter('completed')\"\n        class=\"filter-button\"\n      >\n        Completed\n      </button>\n    </div>\n    \n    <!-- Task List -->\n    <div class=\"task-list-container\">\n      <ul class=\"task-list\">\n        @for (task of store.filteredTodos(); track task.id) {\n          <li\n            (click)=\"store.toggleTodo(task.id)\"\n            class=\"task-item\"\n          >\n            <div class=\"task-content\">\n              <div class=\"task-checkbox\">\n                <input \n                  type=\"checkbox\" \n                  [checked]=\"task.completed\" \n                  (click)=\"$event.stopPropagation()\"\n                  (change)=\"store.toggleTodo(task.id)\"\n                  class=\"checkbox-input\"\n                />\n              </div>\n              <span \n                [ngClass]=\"{ 'completed-task': task.completed }\"\n                class=\"task-title\"\n              >\n                {{ task.title }}\n              </span>\n            </div>\n          </li>\n        }\n        @empty {\n          <div class=\"empty-state\">\n            No tasks found. Add one above!\n          </div>\n        }\n      </ul>\n    </div>\n\n   \n  </div>\n</main>"
        },
        {
            "name": "UserComponent",
            "id": "component-UserComponent-b24039a4e3abd86550d51ce062ed830321c376c56c23ee1699b6a2263271c559772cf6c2eac8dd0a3996a5d07660df028662f4f2e7c55aa6bd12d01dcff43ae0",
            "file": "src/app/user/user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user",
            "styleUrls": [
                "./user.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showAvatar",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "user",
                    "defaultValue": "{\n    avatar: 'assets/image.png',\n    status: 'online' as 'online' | 'away' | 'busy' | 'not-visible'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateUserStatus",
                    "args": [
                        {
                            "name": "status",
                            "type": "\"online\" | \"away\" | \"busy\" | \"not-visible\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "\"online\" | \"away\" | \"busy\" | \"not-visible\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatDividerModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { NgClass } from '@angular/common';\n\n@Component({\n  selector: 'app-user',\n  standalone: true,\n  imports: [\n    MatButtonModule,\n    MatIconModule,\n    MatMenuModule,\n    MatDividerModule,\n    NgClass\n    \n  ],\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.scss']\n})\nexport class UserComponent {\n[x: string]: any;\n  showAvatar = true;\n  user = {\n    avatar: 'assets/image.png',\n    status: 'online' as 'online' | 'away' | 'busy' | 'not-visible'\n  };\n\n\n  updateUserStatus(status: 'online' | 'away' | 'busy' | 'not-visible'): void {\n    this.user.status = status;\n  }\n\n  signOut(): void {\n    console.log('Sign out clicked');\n    // Add your sign out logic here\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '@angular/material' as mat;\n\n.user-container {\n  position: relative;\n\n  button[mat-icon-button] {\n    padding: 0;\n    width: 40px;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: var(--mat-sys-on-primary);\n\n    img {\n      width: 28px;\n      height: 28px;\n      border-radius: 50%;\n      object-fit: cover;\n    }\n\n    .mat-icon {\n      font-size: 28px;\n      width: 28px;\n      height: 28px;\n    }\n  }\n\n  .status-dot {\n    display: inline-block;\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    margin-right: 12px;\n\n    &.online {\n      background-color: #22c55e;\n    }\n    &.away {\n      background-color: #f59e0b;\n    }\n    &.busy {\n      background-color: #ef4444;\n    }\n    &.not-visible {\n      background-color: #9ca3af;\n    }\n  }\n}\n\n.user-menu, .status-menu {\n  @include mat.menu-theme((\n    container-color: var(--mat-sys-surface),\n    item-label-text-color: var(--mat-sys-on-surface),\n  ));\n\n  button[mat-menu-item] {\n    display: flex;\n    align-items: center;\n    \n    .mat-icon {\n      margin-right: 12px;\n      color: var(--mat-sys-on-surface);\n    }\n  }\n\n  .mat-divider {\n    border-top-color: rgba(var(--mat-sys-on-surface), 0.12);\n  }\n}\n  \n  .status-dot {\n    display: inline-block;\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    margin-right: 12px;\n    \n    &.online {\n      background-color: #22c55e;\n    }\n    &.away {\n      background-color: #f59e0b;\n    }\n    &.busy {\n      background-color: #ef4444;\n    }\n    &.not-visible {\n      background-color: #9ca3af;\n    }\n  }\n  \n  .user-menu, .status-menu {\n    min-width: 200px;\n    padding: 8px 0;\n  \n    button[mat-menu-item] {\n      display: flex;\n      align-items: center;\n      \n      .mat-icon {\n        margin-right: 12px;\n      }\n    }\n  }",
                    "styleUrl": "./user.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"user-container\">\n    <!-- Hidden file input for avatar upload -->\n    \n    <button\n      mat-icon-button\n      [matMenuTriggerFor]=\"userActions\"\n      aria-label=\"User menu\">\n      <span class=\"relative\">\n        @if (showAvatar && user.avatar) {\n          <img\n            class=\"w-7 h-7 rounded-full object-cover\"\n            [src]=\"user.avatar\"\n            alt=\"User avatar\"\n            (click)=\"document.getElementById('avatarUpload').click()\">\n        }\n        @if (!showAvatar || !user.avatar) {\n          <mat-icon>account_circle</mat-icon>\n        }\n        <span\n          class=\"absolute right-0 bottom-0 w-2 h-2 rounded-full border border-white\"\n          [ngClass]=\"{\n            'bg-green-500': user.status === 'online',\n            'bg-amber-500': user.status === 'away',\n            'bg-red-500': user.status === 'busy',\n            'bg-gray-400': user.status === 'not-visible'\n          }\">\n        </span>\n      </span>\n    </button>\n  \n    <mat-menu #userActions=\"matMenu\" xPosition=\"before\" class=\"user-menu\">\n      <button mat-menu-item>\n        <mat-icon>account_circle</mat-icon>\n        <span class=\"ml-2\">Profile</span>\n      </button>\n      <button mat-menu-item>\n        <mat-icon>settings</mat-icon>\n        <span class=\"ml-2\">Settings</span>\n      </button>\n      <button mat-menu-item [matMenuTriggerFor]=\"userStatus\">\n        <mat-icon>more_vert</mat-icon>\n        <span class=\"ml-2\">Status</span>\n      </button>\n      <mat-divider class=\"my-2\"></mat-divider>\n      <button mat-menu-item (click)=\"signOut()\">\n        <mat-icon>logout</mat-icon>\n        <span class=\"ml-2\">Sign out</span>\n      </button>\n    </mat-menu>\n  \n    <mat-menu #userStatus=\"matMenu\" class=\"status-menu\">\n      <button mat-menu-item (click)=\"updateUserStatus('online')\">\n        <span class=\"status-dot online\"></span>\n        <span>Online</span>\n      </button>\n      <button mat-menu-item (click)=\"updateUserStatus('away')\">\n        <span class=\"status-dot away\"></span>\n        <span>Away</span>\n      </button>\n      <button mat-menu-item (click)=\"updateUserStatus('busy')\">\n        <span class=\"status-dot busy\"></span>\n        <span>Busy</span>\n      </button>\n      <button mat-menu-item (click)=\"updateUserStatus('not-visible')\">\n        <span class=\"status-dot not-visible\"></span>\n        <span>Invisible</span>\n      </button>\n    </mat-menu>\n  </div>"
        },
        {
            "name": "UserFormComponent",
            "id": "component-UserFormComponent-b4fa4615c46dd391a292055d722b41e717ca61da04e99a4f0d3d6c838f1857a82949399ecf1a011fb925b27b41d7d5321368971bb020f31a86c701253a999520",
            "file": "src/app/pages/user-form/user-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-form",
            "styleUrls": [
                "./user-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "countries",
                    "defaultValue": "['India', 'USA', 'UK', 'Germany', 'Canada']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "darkModeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DarkModeService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "userForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatNativeDateModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n// Angular Material modules\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { DarkModeService } from 'src/app/services/dark-theme/dark-mode.service';\n\n@Component({\n  selector: 'app-user-form',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatIconModule\n  ],\n  templateUrl: './user-form.component.html',\n  styleUrls: ['./user-form.component.scss']\n})\nexport class UserFormComponent {\n  userForm: FormGroup;\n  submitted = false;\n\n  countries = ['India', 'USA', 'UK', 'Germany', 'Canada'];\n\n  constructor(\n    private fb: FormBuilder,\n    public darkModeService: DarkModeService\n  ) {\n    this.userForm = this.fb.group({\n      fullName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      phone: ['', Validators.required],\n      dob: ['', Validators.required],\n      address: ['', Validators.required],\n      country: ['', Validators.required]\n    });\n  }\n\n  get f() {\n    return this.userForm.controls;\n  }\n\n  onSubmit() {\n    this.submitted = true;\n  \n    if (this.userForm.invalid) return;\n  \n    console.log('Form Submitted:', this.userForm.value);\n    this.resetForm();\n  }\n\n  resetForm() {\n    this.userForm.reset();\n    this.userForm.markAsPristine();\n    this.userForm.markAsUntouched();\n    Object.values(this.userForm.controls).forEach(control => {\n      control.setErrors(null);\n    });\n    this.submitted = false;\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// user-form.component.scss\n@use '@angular/material' as mat;\n\n.modern-form {\n  max-width: 600px;\n  padding: 32px;\n  margin: 2rem auto;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n\n  // Dark mode styles\n  &.dark-mode {\n    background-color: #424242;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);\n    color: white;\n\n    // Form field styles in dark mode\n    .mat-mdc-form-field {\n      .mdc-floating-label {\n        color: rgba(var(--mat-sys-primary-dark));\n        \n        &--float-above {\n          color: rgba(var(--mat-sys-primary-dark));\n        }\n      }\n\n      .mdc-text-field--filled:not(.mdc-text-field--disabled) {\n        background-color: rgba(var(--mat-sys-primary-dark), 0.95);\n        \n        &:hover {\n          background-color: rgba(var(--mat-sys-primary-dark), 0.95);\n        }\n        \n        &.mdc-text-field--focused {\n          background-color: rgba(var(--mat-sys-primary-dark), 0.95);\n        }\n      }\n\n      .mat-mdc-input-element {\n        color: white;\n      }\n\n      .mat-mdc-form-field-subscript-wrapper {\n        color: #ff8a65; // Error text color in dark mode\n      }\n    }\n\n    // Select panel in dark mode\n    .mat-mdc-select-panel {\n      background-color: rgba(var(--mat-sys-primary-dark), 0.95);\n      \n      .mat-mdc-option {\n        color: white;\n        \n        &:hover:not(.mdc-list-item--disabled),\n        &.mdc-list-item--selected:not(.mdc-list-item--disabled) {\n          background-color: rgba(var(--mat-sys-primary-dark), 0.95);\n        }\n      }\n    }\n\n    // Datepicker in dark mode\n    .mat-datepicker-content {\n      background-color: rgba(var(--mat-sys-primary-dark), 0.95);\n      color: white;\n      \n      .mat-calendar-body-cell-content {\n        color: white;\n      }\n      \n      .mat-calendar-body-selected {\n        background-color: #7986cb;\n        color: white;\n      }\n    }\n   \n\n  }\n}\n\n.grid-2 {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 8px;\n}\n\n// Enhanced fill appearance with better labels\n.mat-mdc-form-field {\n  @include mat.form-field-density(-5); \n  \n  // Label styling\n  .mdc-floating-label {\n    font-size: 14px;\n    color: rgba(0, 0, 0, 0.6);\n    \n    &--float-above {\n      color: #303f9f;\n    }\n  }\n\n  // Fill appearance customization\n  .mdc-text-field--filled:not(.mdc-text-field--disabled) {\n    background-color: rgba(0, 0, 0, 0.04);\n    border-radius: 4px 4px 0 0;\n    transition: background-color 0.2s ease;\n    \n    &:hover {\n      background-color: rgba(0, 0, 0, 0.08);\n    }\n    \n    &.mdc-text-field--focused {\n      background-color: rgba(0, 0, 0, 0.04);\n    }\n  }\n\n  // Input text styling\n  .mat-mdc-input-element {\n    font-size: 14px;\n    padding-top: 4px;\n  }\n\n  // Error message styling\n  .mat-mdc-form-field-error {\n    font-size: 12px;\n    line-height: 1.3;\n  }\n}\n\n// Submit button styling\n.submit-container {\n  margin-top: 4px;\n  display: flex;\n  justify-content: flex-end;\n  \n  .submit-btn {\n    padding: 0 16px;\n    height: 32px;\n    font-weight: 500;\n    letter-spacing: 0.5px;\n    \n    .mat-icon {\n      margin-left: 4px;\n      font-size: 16px;\n    }\n  }\n}\n\n@media (max-width: 600px) {\n  .modern-form {\n    padding: 24px;\n    margin: 1rem;\n    border-radius: 8px;\n    width: calc(100% - 2rem); // Ensure full width minus margins\n  }\n  \n  .grid-2 {\n    grid-template-columns: 1fr; // Change to single column\n    gap: 12px; // Slightly larger gap for mobile\n  }\n\n  // Make all form fields consistent\n  .mat-mdc-form-field {\n    width: 100% !important; // Force full width\n    min-width: 100% !important; // Prevent any shrinking\n    \n    // Ensure consistent input sizes\n    .mat-mdc-text-field-wrapper {\n      width: 100% !important;\n    }\n    \n    // Make labels consistent\n    .mdc-floating-label {\n      font-size: 14px !important;\n    }\n    \n    // Make input text consistent\n    .mat-mdc-input-element {\n      font-size: 14px !important;\n    }\n  }\n\n  // Special case for select dropdowns\n  .mat-mdc-select {\n    width: 100% !important;\n  }\n\n  // Datepicker inputs\n  .mat-datepicker-input {\n    width: 100% !important;\n  }\n\n  // Submit button container\n  .submit-container {\n    justify-content: center; // Center button on mobile\n    \n\n  }\n}",
                    "styleUrl": "./user-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "darkModeService",
                        "type": "DarkModeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "darkModeService",
                        "type": "DarkModeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "f": {
                    "name": "f",
                    "getSignature": {
                        "name": "f",
                        "type": "",
                        "returnType": "",
                        "line": 54
                    }
                }
            },
            "templateData": "<form [formGroup]=\"userForm\" (ngSubmit)=\"onSubmit()\" class=\"modern-form\" [class.dark-mode]=\"darkModeService.darkMode()\">  <!-- Row 1: Name and Email -->\n  <div class=\"grid-2\">\n    <!-- Name -->\n    <mat-form-field appearance=\"fill\" floatLabel=\"always\">\n      <mat-label>Full Name</mat-label>\n      <input matInput formControlName=\"fullName\" placeholder=\"Full Name\" required>\n      <mat-icon matSuffix>person</mat-icon>\n      @if (userForm.get('fullName')?.hasError('required') && \n          (userForm.get('fullName')?.touched || submitted)) {\n        <mat-error>Please enter your full name</mat-error>\n      }\n    </mat-form-field>\n\n    <!-- Email -->\n    <mat-form-field appearance=\"fill\" floatLabel=\"always\">\n      <mat-label>Email Address</mat-label>\n      <input matInput type=\"email\" formControlName=\"email\" placeholder=\"Email\" required>\n      <mat-icon matSuffix>email</mat-icon>\n      @if (userForm.get('email')?.hasError('required') && \n          (userForm.get('email')?.touched || submitted)) {\n        <mat-error>Email is required</mat-error>\n      }\n      @if (userForm.get('email')?.hasError('email') && \n          (userForm.get('email')?.touched || submitted)) {\n        <mat-error>Please enter a valid email</mat-error>\n      }\n    </mat-form-field>\n  </div>\n\n  <!-- Row 2: Phone and Date of Birth -->\n  <div class=\"grid-2\">\n    <!-- Phone -->\n    <mat-form-field appearance=\"fill\" floatLabel=\"always\">\n      <mat-label>Phone Number</mat-label>\n      <input matInput formControlName=\"phone\" placeholder=\"Phone Number\" required>\n      <mat-icon matSuffix>phone</mat-icon>\n      @if (userForm.get('phone')?.hasError('required') && \n          (userForm.get('phone')?.touched || submitted)) {\n        <mat-error>Phone number is required</mat-error>\n      }\n    </mat-form-field>\n\n    <!-- Date of Birth -->\n    <mat-form-field appearance=\"fill\" floatLabel=\"always\">\n      <mat-label>Date of Birth</mat-label>\n      <input matInput [matDatepicker]=\"picker\" formControlName=\"dob\" placeholder=\"Date Of Birth\"required>\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n      <mat-datepicker #picker></mat-datepicker>\n      @if (userForm.get('dob')?.hasError('required') && \n          (userForm.get('dob')?.touched || submitted)) {\n        <mat-error>Please select your date of birth</mat-error>\n      }\n    </mat-form-field>\n  </div>\n\n  <!-- Address -->\n  <mat-form-field appearance=\"fill\" floatLabel=\"always\">\n    <mat-label>Full Address</mat-label>\n    <textarea matInput formControlName=\"address\" \n              placeholder=\"Address\" \n              rows=\"2\" required></textarea>\n    @if (userForm.get('address')?.hasError('required') && \n        (userForm.get('address')?.touched || submitted)) {\n      <mat-error>Please enter your address</mat-error>\n    }\n  </mat-form-field>\n\n  <!-- Country -->\n  <mat-form-field appearance=\"fill\" floatLabel=\"always\">\n    <mat-label>Country</mat-label>\n    <mat-select formControlName=\"country\" required>\n      <mat-option value=\"\">-- Select Country --</mat-option>\n      <mat-option *ngFor=\"let c of countries\" [value]=\"c\">{{ c }}</mat-option>\n    </mat-select>\n    @if (userForm.get('country')?.hasError('required') && \n        (userForm.get('country')?.touched || submitted)) {\n      <mat-error>Please select your country</mat-error>\n    }\n  </mat-form-field>\n\n  <!-- Submit Button -->\n  <div class=\"submit-container\">\n    <button mat-raised-button color=\"primary\" type=\"submit\" class=\"submit-btn\">\n      Submit\n      <mat-icon>send</mat-icon>\n    </button>\n  </div>\n</form>"
        }
    ],
    "modules": [
        {
            "name": "TranslocoRootModule",
            "id": "module-TranslocoRootModule-290b6eddb0df8ff819c4dbe4c10c776989d2f7b03f46de13148f37167ba7e31bc4b4cfdc99f41da00c1dc76a2d82b8f31cbdc26e13d274993a297644122fa028",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/transloco-root.module.ts",
            "methods": [],
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport {\n  TRANSLOCO_LOADER,\n  Translation,\n  TranslocoLoader,\n  TRANSLOCO_CONFIG,\n  translocoConfig,\n  TranslocoModule,\n} from '@jsverse/transloco';\nimport { Injectable, NgModule } from '@angular/core';\nimport { environment } from '../environments/environment';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class TranslocoHttpLoader implements TranslocoLoader {\n  constructor(private http: HttpClient) {}\n\n  getTranslation(lang: string): Observable<Translation> {\n    return this.http.get<Translation>(`/assets/i18n/${lang}.json`);\n  }\n}\n\n@NgModule({\n  exports: [TranslocoModule],\n  providers: [\n    {\n      provide: TRANSLOCO_CONFIG,\n      useValue: translocoConfig({\n        availableLangs: ['de', 'en'],\n        defaultLang: 'de',\n        // Remove this option if your application doesn't support changing language in runtime.\n        reRenderOnLangChange: true,\n        prodMode: environment.production,\n      }),\n    },\n    { provide: TRANSLOCO_LOADER, useClass: TranslocoHttpLoader },\n  ],\n})\nexport class TranslocoRootModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TranslocoRootModuleMock",
            "id": "module-TranslocoRootModuleMock-f12f0cd71ce3c0b27deb30bb8e4c3c5d9a191e54cc81f419939b752208b1384bc6b79afe97742ee75c63267ab9d4b082cd466cae4eb4557fb9182651fd427017",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/stories/mocks/transloco.mock.ts",
            "methods": [],
            "sourceCode": "// src/stories/mocks/transloco.mock.ts\r\nimport { NgModule } from '@angular/core';\r\n\r\n@NgModule({})\r\nexport class TranslocoRootModuleMock {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "apiUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/Employee/store/employee-store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://jsonplaceholder.typicode.com/users'"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideAnimations(), // Keep this\n    provideHttpClient(),\n    provideStore(),\n    provideEffects(),\n    provideToastr(),\n    provideNativeDateAdapter(),\n    provideStoreDevtools({ maxAge: 25, logOnly: !isDevMode() }),\n  ],\n}"
            },
            {
                "name": "EmployeeStore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/Employee/store/employee-store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "signalStore(\n  { providedIn: 'root' },\n  withState(initialState),\n  withComputed(({ employees }) => ({\n    employees: computed(() => employees()),\n    isLoading: computed(() => !initialState.initialized),\n  })),\n  withMethods((store, http = inject(HttpClient)) => ({\n    async loadEmployees() {\n      try {\n        // Check localStorage first\n        const localData = localStorage.getItem('employees');\n        if (localData) {\n          const employees: Employee[] = JSON.parse(localData);\n          patchState(store, { employees, initialized: true, error: null });\n          return;\n        }\n\n        // Fetch from API if not in localStorage\n        const response = await lastValueFrom(http.get<ApiUser[]>(apiUrl));\n        const mappedEmployees: Employee[] = response.map(user => ({\n          id: user.id,\n          name: user.name,\n          company: user.company.name,\n          bs: user.company.bs,\n          website: user.website,\n        }));\n        localStorage.setItem('employees', JSON.stringify(mappedEmployees));\n        patchState(store, { employees: mappedEmployees, initialized: true, error: null });\n      } catch (error) {\n        patchState(store, { error: 'Failed to load employees' });\n        throw error;\n      }\n    },\n    addEmployee(employee: Employee) {\n      try {\n        const newEmployees = [...store.employees(), { ...employee, id: Date.now() }]; // Use timestamp for unique ID\n        localStorage.setItem('employees', JSON.stringify(newEmployees));\n        patchState(store, { employees: newEmployees, error: null });\n      } catch (error) {\n        patchState(store, { error: 'Failed to add employee' });\n        throw error;\n      }\n    },\n    updateEmployee(employee: Employee) {\n      try {\n        const updatedEmployees = store.employees().map(emp =>\n          emp.id === employee.id ? employee : emp\n        );\n        localStorage.setItem('employees', JSON.stringify(updatedEmployees));\n        patchState(store, { employees: updatedEmployees, error: null });\n      } catch (error) {\n        patchState(store, { error: 'Failed to update employee' });\n        throw error;\n      }\n    },\n    deleteEmployee(empId: number) {\n      try {\n        const updatedEmployees = store.employees().filter(emp => emp.id !== empId);\n        localStorage.setItem('employees', JSON.stringify(updatedEmployees));\n        patchState(store, { employees: updatedEmployees, error: null });\n      } catch (error) {\n        patchState(store, { error: 'Failed to delete employee' });\n        throw error;\n      }\n    },\n    getEmployee(empId: number): Employee | undefined {\n      try {\n        return store.employees().find(emp => emp.id === empId);\n      } catch (error) {\n        patchState(store, { error: `Failed to fetch employee with ID ${empId}` });\n        throw error;\n      }\n    },\n  })),\n  withHooks({\n    onInit(store) {\n      store.loadEmployees();\n    },\n  })\n)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/Employee/store/employee-store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EmployeeState",
                "defaultValue": "{\n  initialized: false,\n  error: null,\n  employees: [],\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/store/ng/todos.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TodoState",
                "defaultValue": "{\n  filter: 'all',\n  intialized: false,\n  searchTerm: ''\n}"
            },
            {
                "name": "TodoStore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/store/ng/todos.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "signalStore(\n  { providedIn: 'root' },\n  withState(initialState),\n  withProps((store) => {\n    return {\n      _todoResource: resource<TodoItem[], string>({\n        request: store.searchTerm,\n        loader: async (params) => {\n          const { request: searchTerm, abortSignal } = params;\n          try {\n            const resp = await fetch(\n              'https://jsonplaceholder.typicode.com/users/1/todos',\n              {\n                signal: abortSignal,\n              }\n            );\n            if (resp.status !== 200) {\n              throw new Error(resp.status.toString());\n            }\n            const todos = (await resp.json()) as TodoItem[];\n            patchState(store, {\n              intialized: true,\n            });\n            return todos.filter((todo) =>\n              todo.title.toLowerCase().includes(searchTerm.toLowerCase())\n            );\n          } catch (error) {\n            const todosFromStorage = JSON.parse(\n              localStorage.getItem(todoStoreKey)\n            ) as TodoItem[];\n            return todosFromStorage;\n          }\n        }\n      })\n    };\n  }),\n  withComputed(({ filter, _todoResource }) => ({\n    todos: computed(() => _todoResource.value() || []),\n    todosLoading: computed(() => _todoResource.isLoading()),\n    todosLoadingError: computed(() => _todoResource.error()),\n    completedTodos: computed(() =>\n      _todoResource.value()?.filter((todoItem) => {\n        return todoItem.completed;\n      }) || []\n    ),\n    filteredTodos: computed(() => {\n      switch (filter()) {\n        case 'completed':\n          return _todoResource.value()?.filter((todoItem) => {\n            return todoItem.completed;\n          }) || [];\n        case 'active':\n          return _todoResource.value()?.filter((todoItem) => {\n            return !todoItem.completed;\n          }) || [];\n        default:\n          return _todoResource.value() || [];\n      }\n    }),\n  })),\n  withMethods((store, http = inject(HttpClient)) => ({\n    updateSearchTerm(searchTerm: string) {\n      patchState(store, {\n        searchTerm: searchTerm,\n      });\n    },\n    addTodo(newTodoTitle: string) {\n      http\n        .post<TodoItem>('https://jsonplaceholder.typicode.com/users/1/todos', {\n          title: newTodoTitle,\n          completed: false,\n          \n        })\n        .subscribe((todo) => {\n          store._todoResource.update((todos) => {\n            if (!todos) {\n              return [todo];            \n            }\n            return [todo, ...todos];\n          });\n        });\n    },\n    changeFilter(filter: TodoFilter) {\n      console.log({ filter });\n      patchState(store, {\n        filter,\n      });\n    },\n    toggleTodo(todoId: string) {\n      const newCompleted = !store._todoResource.value()?.find((todo) => todo.id === todoId)\n        ?.completed;\n      http\n        .patch<TodoItem>(\n          `https://jsonplaceholder.typicode.com/todos/${todoId}`,\n          {\n            completed: newCompleted,\n          }\n        )\n        .subscribe(() => {\n          store._todoResource.update((todos) => {\n            if (!todos) {\n              return [];\n            }\n            return todos.map((todoItem) => {\n              if (todoItem.id === todoId) {\n                return {\n                  ...todoItem,\n                  completed: newCompleted\n                };\n              }\n              return todoItem;\n            });\n          });\n        });\n    },\n  })),\n  withHooks({\n    onInit(store) {\n      effect(() => {\n        const state = getState(store);\n        console.log('effect: ', state);\n        if (state.intialized) {\n          localStorage.setItem(todoStoreKey, JSON.stringify(store.todos()));\n        }\n      });\n    },\n  })\n)"
            },
            {
                "name": "todoStoreKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/store/ng/todos.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'ng_cookbook_todos'"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "EmployeeState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/pages/Employee/store/employee-store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TodoFilter",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"all\" | \"active\" | \"completed\"",
                "file": "src/app/pages/store/ng/todos.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TodoItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/pages/store/ng/todos.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TodoState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/pages/store/ng/todos.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/pages/Employee/store/employee-store.ts": [
                {
                    "name": "apiUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/Employee/store/employee-store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://jsonplaceholder.typicode.com/users'"
                },
                {
                    "name": "EmployeeStore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/Employee/store/employee-store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "signalStore(\n  { providedIn: 'root' },\n  withState(initialState),\n  withComputed(({ employees }) => ({\n    employees: computed(() => employees()),\n    isLoading: computed(() => !initialState.initialized),\n  })),\n  withMethods((store, http = inject(HttpClient)) => ({\n    async loadEmployees() {\n      try {\n        // Check localStorage first\n        const localData = localStorage.getItem('employees');\n        if (localData) {\n          const employees: Employee[] = JSON.parse(localData);\n          patchState(store, { employees, initialized: true, error: null });\n          return;\n        }\n\n        // Fetch from API if not in localStorage\n        const response = await lastValueFrom(http.get<ApiUser[]>(apiUrl));\n        const mappedEmployees: Employee[] = response.map(user => ({\n          id: user.id,\n          name: user.name,\n          company: user.company.name,\n          bs: user.company.bs,\n          website: user.website,\n        }));\n        localStorage.setItem('employees', JSON.stringify(mappedEmployees));\n        patchState(store, { employees: mappedEmployees, initialized: true, error: null });\n      } catch (error) {\n        patchState(store, { error: 'Failed to load employees' });\n        throw error;\n      }\n    },\n    addEmployee(employee: Employee) {\n      try {\n        const newEmployees = [...store.employees(), { ...employee, id: Date.now() }]; // Use timestamp for unique ID\n        localStorage.setItem('employees', JSON.stringify(newEmployees));\n        patchState(store, { employees: newEmployees, error: null });\n      } catch (error) {\n        patchState(store, { error: 'Failed to add employee' });\n        throw error;\n      }\n    },\n    updateEmployee(employee: Employee) {\n      try {\n        const updatedEmployees = store.employees().map(emp =>\n          emp.id === employee.id ? employee : emp\n        );\n        localStorage.setItem('employees', JSON.stringify(updatedEmployees));\n        patchState(store, { employees: updatedEmployees, error: null });\n      } catch (error) {\n        patchState(store, { error: 'Failed to update employee' });\n        throw error;\n      }\n    },\n    deleteEmployee(empId: number) {\n      try {\n        const updatedEmployees = store.employees().filter(emp => emp.id !== empId);\n        localStorage.setItem('employees', JSON.stringify(updatedEmployees));\n        patchState(store, { employees: updatedEmployees, error: null });\n      } catch (error) {\n        patchState(store, { error: 'Failed to delete employee' });\n        throw error;\n      }\n    },\n    getEmployee(empId: number): Employee | undefined {\n      try {\n        return store.employees().find(emp => emp.id === empId);\n      } catch (error) {\n        patchState(store, { error: `Failed to fetch employee with ID ${empId}` });\n        throw error;\n      }\n    },\n  })),\n  withHooks({\n    onInit(store) {\n      store.loadEmployees();\n    },\n  })\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/Employee/store/employee-store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EmployeeState",
                    "defaultValue": "{\n  initialized: false,\n  error: null,\n  employees: [],\n}"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideAnimations(), // Keep this\n    provideHttpClient(),\n    provideStore(),\n    provideEffects(),\n    provideToastr(),\n    provideNativeDateAdapter(),\n    provideStoreDevtools({ maxAge: 25, logOnly: !isDevMode() }),\n  ],\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/pages/store/ng/todos.store.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/store/ng/todos.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TodoState",
                    "defaultValue": "{\n  filter: 'all',\n  intialized: false,\n  searchTerm: ''\n}"
                },
                {
                    "name": "TodoStore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/store/ng/todos.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "signalStore(\n  { providedIn: 'root' },\n  withState(initialState),\n  withProps((store) => {\n    return {\n      _todoResource: resource<TodoItem[], string>({\n        request: store.searchTerm,\n        loader: async (params) => {\n          const { request: searchTerm, abortSignal } = params;\n          try {\n            const resp = await fetch(\n              'https://jsonplaceholder.typicode.com/users/1/todos',\n              {\n                signal: abortSignal,\n              }\n            );\n            if (resp.status !== 200) {\n              throw new Error(resp.status.toString());\n            }\n            const todos = (await resp.json()) as TodoItem[];\n            patchState(store, {\n              intialized: true,\n            });\n            return todos.filter((todo) =>\n              todo.title.toLowerCase().includes(searchTerm.toLowerCase())\n            );\n          } catch (error) {\n            const todosFromStorage = JSON.parse(\n              localStorage.getItem(todoStoreKey)\n            ) as TodoItem[];\n            return todosFromStorage;\n          }\n        }\n      })\n    };\n  }),\n  withComputed(({ filter, _todoResource }) => ({\n    todos: computed(() => _todoResource.value() || []),\n    todosLoading: computed(() => _todoResource.isLoading()),\n    todosLoadingError: computed(() => _todoResource.error()),\n    completedTodos: computed(() =>\n      _todoResource.value()?.filter((todoItem) => {\n        return todoItem.completed;\n      }) || []\n    ),\n    filteredTodos: computed(() => {\n      switch (filter()) {\n        case 'completed':\n          return _todoResource.value()?.filter((todoItem) => {\n            return todoItem.completed;\n          }) || [];\n        case 'active':\n          return _todoResource.value()?.filter((todoItem) => {\n            return !todoItem.completed;\n          }) || [];\n        default:\n          return _todoResource.value() || [];\n      }\n    }),\n  })),\n  withMethods((store, http = inject(HttpClient)) => ({\n    updateSearchTerm(searchTerm: string) {\n      patchState(store, {\n        searchTerm: searchTerm,\n      });\n    },\n    addTodo(newTodoTitle: string) {\n      http\n        .post<TodoItem>('https://jsonplaceholder.typicode.com/users/1/todos', {\n          title: newTodoTitle,\n          completed: false,\n          \n        })\n        .subscribe((todo) => {\n          store._todoResource.update((todos) => {\n            if (!todos) {\n              return [todo];            \n            }\n            return [todo, ...todos];\n          });\n        });\n    },\n    changeFilter(filter: TodoFilter) {\n      console.log({ filter });\n      patchState(store, {\n        filter,\n      });\n    },\n    toggleTodo(todoId: string) {\n      const newCompleted = !store._todoResource.value()?.find((todo) => todo.id === todoId)\n        ?.completed;\n      http\n        .patch<TodoItem>(\n          `https://jsonplaceholder.typicode.com/todos/${todoId}`,\n          {\n            completed: newCompleted,\n          }\n        )\n        .subscribe(() => {\n          store._todoResource.update((todos) => {\n            if (!todos) {\n              return [];\n            }\n            return todos.map((todoItem) => {\n              if (todoItem.id === todoId) {\n                return {\n                  ...todoItem,\n                  completed: newCompleted\n                };\n              }\n              return todoItem;\n            });\n          });\n        });\n    },\n  })),\n  withHooks({\n    onInit(store) {\n      effect(() => {\n        const state = getState(store);\n        console.log('effect: ', state);\n        if (state.intialized) {\n          localStorage.setItem(todoStoreKey, JSON.stringify(store.todos()));\n        }\n      });\n    },\n  })\n)"
                },
                {
                    "name": "todoStoreKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/store/ng/todos.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'ng_cookbook_todos'"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/pages/Employee/store/employee-store.ts": [
                {
                    "name": "EmployeeState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/pages/Employee/store/employee-store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/pages/store/ng/todos.store.ts": [
                {
                    "name": "TodoFilter",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"all\" | \"active\" | \"completed\"",
                    "file": "src/app/pages/store/ng/todos.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TodoState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/pages/store/ng/todos.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/pages/store/ng/todos.model.ts": [
                {
                    "name": "TodoItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/pages/store/ng/todos.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/custom-sidenav/custom-sidenav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomSidenavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/custom-sidenav/custom-sidenav.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Employee/Employee.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Employee",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Employee/add-employee/add-employee.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddEmployeeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Employee/employee/employee.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmployeeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Employee/store/employee-store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApiUser",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Employee/store/employee-store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "apiUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Employee/store/employee-store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmployeeStore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Employee/store/employee-store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Employee/store/employee-store.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "EmployeeState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/analytics/analytics.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AnalyticsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/comment/comment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/content/content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Dashboard_Component",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/store/ng/todos.model.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TodoItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/store/ng/todos.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/store/ng/todos.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TodoStore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/store/ng/todos.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "todoStoreKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/store/ng/todos.store.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TodoFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/store/ng/todos.store.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TodoState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/store/store.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoreComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/user-form/user-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/dark-theme/dark-mode.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DarkModeService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/responsive/responsive.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ResponsiveService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme/theme.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Theme",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/transloco-root.module.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TranslocoHttpLoader",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/user/user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/mocks/dark-mode.service.mock.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DarkModeServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/mocks/responsive.service.mock.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ResponsiveServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/mocks/theme.service.mock.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}